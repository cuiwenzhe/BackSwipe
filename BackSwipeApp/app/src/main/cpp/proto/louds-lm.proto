// Defines messages used by the LoudsLm language model.
//
// TODO(ouyang): Some of the current parameters are not really LoudsLm specific,
// but are stored here for convenience. They should be moved to a more general
// language-specific proto in the future.

syntax = "proto2";

package keyboard.lm;
option java_package = "com.google.inputmethod.keyboard.lm.louds";

import "android-decoder-params.proto";
import "decoder-params.proto";
import "keyboard-language-params.proto";

message DynamicLmProperties {
  // This message applies to any DyanmicLms whose names match (i.e., contain)
  // this lm_keyword.
  optional string lm_keyword = 1;

  // The interpolation_weight for matched DyanmicLms.
  optional float interpolation_weight = 2;
}

message LoudsLmParams {
  // The format version numbers for known LoudsLm formats. They should match
  // the CL number that generated each format.
  //
  // A new format version number should be added only when the LoudsLm format
  // changes in such a way that it is no longer backward compatible. Old version
  // numbers should not be changed or removed if there's any chance that the
  // version is in circulation.
  enum FormatVersionNumber {
    INVALID = 0;           // An invalid version number that cannot be read.
    FAVA_BETA = 86736212;  // The CL number that generated this format.
  }

  // The format version of the LoudsLm. Default value should always be equal to
  // the latest format version in source.
  optional FormatVersionNumber format_version = 1 [default = FAVA_BETA];

  // The stupid back factor (in log probability space).
  optional float stupid_backoff_logp = 2 [default = -1.0];

  // The language model quantizes log probabilities into 256 equally spaced bins
  // spanning the range: [-logp_quantizer_range, 0].
  optional float logp_quantizer_range = 3 [default = 25.0];

  // The maximum number of term_ids (limited to the 16-bit addressable space).
  optional int32 max_num_term_ids = 4 [default = 0x10000];

  // Whether the LM's lexicon should encode prefix unigrams.
  optional bool enable_prefix_unigrams = 5 [default = true];

  // A version number for the contents for this LM. This can be used to indicate
  // the freshness of this model, and is independent of format_version. It
  // should be strictly increasing with each LM release, and can be used to
  // determine if a fresher (i.e., higher content_version) LM is available.
  optional int32 content_version = 6 [default = 0];

  // The sequence of badwords associated with this LM. Note that these badwords
  // are not be used directly by the language model, but are exposed via
  // LoudsLm::GetBadwords for the user to decide how to use them. It contains
  // UTF-8 strings of space-separated terms (lower case).
  repeated string badwords = 7;

  // A minimum unigram logp threshold for next-word predictions generated from
  // higher order n-grams (3-grams and above, see LoudsLm::PredictNextWords).
  //
  // This can be used to prevent the LM from predicting less common words,
  // which are more likely to be offensive or embarrassing in context.
  //
  // WARNING: The default threshold is very conservative, and will only allow
  // the most frequent unigrams as next-word predictions. It should be
  // overridden whenever possible to provide the best tradeoff between
  // prediction coverage and quality for each language/LM.
  optional float min_unigram_logp_for_predictions = 8 [default = -100.0];

  // Properties for the secondary DyamicLms that are loaded alongside this LM.
  // For example, these can specify the behavior of Contacts or UserHistory LMs.
  repeated DynamicLmProperties dynamic_lm_properties = 9;

  // The decoder should suppress uppercase suggestions (e.g., "You", "YOU") that
  // score less than this far below their lowercase variant (e.g., "you").
  // Note: Lowercase suggestions are never suppressed.
  optional float uppercase_suppression_score_threshold = 10 [default = -100.0];

  // Extra backoff weight when backing off to an uppercase unigram.
  // TODO(ouyang): Remove this parameter when no longer needed by the LMs.
  optional float uppercase_unigram_extra_backoff_weight = 11 [default = -0.0];

  // The DecoderParams to use when this LM is loaded. These should override
  // any existing parameters in the decoder.
  optional keyboard.decoder.DecoderParams decoder_params = 12;

  // Whether the LoudsLm stores backoff weights. If false, use stupid-backoff.
  // TODO(ouyang): We might want stupid backoff even when there are backoff
  // weights. E.g. we could potentially minimize storage by essentially pruning
  // the weights (only including the most useful ones vs an assumed stupid
  // backoff baseline).
  optional bool has_backoff_weights = 13 [default = false];

  // The autocorrect threshold to use for this model.
  // Note: Does not affect Fava, which defines this threshold on the client.
  optional float autocorrect_threshold = 14 [default = 0.45];

  // The autocorrection threshold to use in place of autocorrect_threshold
  // (see above) for single-letter tapped words. A higher threshold here
  // prevents unwanted corrections away from abbreviations, initialisms, or
  // acronyms, like "u" and "N.B.". Note that this does not affect
  // capitalization-only corrections such as "i" -> "I".
  //
  // Set this value to a value <= autocorrect_threshold (or leave unset) to use
  // the autocorrect_threshold field for single letter words.
  //
  // TODO(lhellsten): Adjust or remove this threshold as abbreviations start
  // being handled by the LM.
  //
  // Note: Does not affect Fava, which defines this threshold on the client
  // (with a value of 0.9).
  optional float autocorrect_threshold_for_single_letter = 22 [default = -1.0];

  // Parameters controlling the behavior of dynamic LMs. If explicitly set,
  // these will override existing values in the decoder.
  optional keyboard.decoder.android.DynamicLmParams dynamic_lm_params = 15;

  // Additional params to use when this LM is loaded. These should override any
  // existing parameters in the client.  Unlike decoder_params, these
  // historically were defined differently per LM, so the client required a
  // separate proto.
  optional keyboard.decoder.KeyboardLanguageParams keyboard_language_params =
      16;

  // Whether or not to include unigram-level next-word predictions. If set to
  // true, PredictNextWords will include the top unigram words words in the
  // LM (e.g., "the", "to", "I"). This is useful for ensuing that the keyboard
  // shows a full set of predictions even if there are no higher-order ngrams.
  optional bool include_unigram_predictions = 17 [default = false];

  // If the top two results are case variants, the second result is lowercase,
  // and their score difference is less than this value, then the decoder will
  // swap the top two results.  This helps to avoid suggesting e.g. "Apple"
  // instead of "apple".  Set to 0 to disable this functionality.
  optional float swap_case_variants_score_diff_threshold = 18 [default = 0.0];

  // If set, enable a heuristic to generate compounds by fusing
  // multi-word DecoderResults. Consumed by AndroidDecoderWrapper.
  optional bool enable_auto_compounding = 19 [default = false];

  // If true (false), require that words considered for auto-compounding are
  // title-cased (lower-cased).
  optional bool auto_compound_german_nouns = 20;

  // When compounding multi-word results, adjust their spatial score
  // by this amount for every space removed.
  optional float auto_compound_score_per_compounding = 21 [default = 0.0];
}
