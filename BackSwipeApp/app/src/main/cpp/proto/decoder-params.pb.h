// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decoder-params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_decoder_2dparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_decoder_2dparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_decoder_2dparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_decoder_2dparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_decoder_2dparams_2eproto;
namespace proto {
class DecoderParams;
class DecoderParamsDefaultTypeInternal;
extern DecoderParamsDefaultTypeInternal _DecoderParams_default_instance_;
class GestureSpatialParams;
class GestureSpatialParamsDefaultTypeInternal;
extern GestureSpatialParamsDefaultTypeInternal _GestureSpatialParams_default_instance_;
class TapSpatialParams;
class TapSpatialParamsDefaultTypeInternal;
extern TapSpatialParamsDefaultTypeInternal _TapSpatialParams_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::DecoderParams* Arena::CreateMaybeMessage<::proto::DecoderParams>(Arena*);
template<> ::proto::GestureSpatialParams* Arena::CreateMaybeMessage<::proto::GestureSpatialParams>(Arena*);
template<> ::proto::TapSpatialParams* Arena::CreateMaybeMessage<::proto::TapSpatialParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class GestureSpatialParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GestureSpatialParams) */ {
 public:
  inline GestureSpatialParams() : GestureSpatialParams(nullptr) {};
  virtual ~GestureSpatialParams();

  GestureSpatialParams(const GestureSpatialParams& from);
  GestureSpatialParams(GestureSpatialParams&& from) noexcept
    : GestureSpatialParams() {
    *this = ::std::move(from);
  }

  inline GestureSpatialParams& operator=(const GestureSpatialParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GestureSpatialParams& operator=(GestureSpatialParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GestureSpatialParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GestureSpatialParams* internal_default_instance() {
    return reinterpret_cast<const GestureSpatialParams*>(
               &_GestureSpatialParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GestureSpatialParams& a, GestureSpatialParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GestureSpatialParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GestureSpatialParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GestureSpatialParams* New() const final {
    return CreateMaybeMessage<GestureSpatialParams>(nullptr);
  }

  GestureSpatialParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GestureSpatialParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GestureSpatialParams& from);
  void MergeFrom(const GestureSpatialParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GestureSpatialParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GestureSpatialParams";
  }
  protected:
  explicit GestureSpatialParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decoder_2dparams_2eproto);
    return ::descriptor_table_decoder_2dparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowMultiTermFieldNumber = 16,
    kUseSpaceForMultiTermFieldNumber = 17,
    kExtraTermScoreFieldNumber = 19,
    kMinSpaceAlignScoreFieldNumber = 18,
    kKeyErrorSigmaFieldNumber = 1,
    kDirectionErrorSigmaFieldNumber = 2,
    kSkipPauseScoreFieldNumber = 3,
    kSkipCornerScoreFieldNumber = 4,
    kPreciseMatchThresholdFieldNumber = 6,
    kMaxImpreciseMatchPenaltyFieldNumber = 7,
    kMinCurvatureForCornerFieldNumber = 10,
    kPauseDurationInMillisFieldNumber = 11,
    kEndpointOffsetForMaximaFieldNumber = 12,
    kMinAlignKeyScoreFieldNumber = 13,
    kCompletionScoreFieldNumber = 14,
    kFirstPointWeightFieldNumber = 15,
  };
  // optional bool allow_multi_term = 16 [default = false];
  bool has_allow_multi_term() const;
  private:
  bool _internal_has_allow_multi_term() const;
  public:
  void clear_allow_multi_term();
  bool allow_multi_term() const;
  void set_allow_multi_term(bool value);
  private:
  bool _internal_allow_multi_term() const;
  void _internal_set_allow_multi_term(bool value);
  public:

  // optional bool use_space_for_multi_term = 17 [default = false];
  bool has_use_space_for_multi_term() const;
  private:
  bool _internal_has_use_space_for_multi_term() const;
  public:
  void clear_use_space_for_multi_term();
  bool use_space_for_multi_term() const;
  void set_use_space_for_multi_term(bool value);
  private:
  bool _internal_use_space_for_multi_term() const;
  void _internal_set_use_space_for_multi_term(bool value);
  public:

  // optional float extra_term_score = 19 [default = 0];
  bool has_extra_term_score() const;
  private:
  bool _internal_has_extra_term_score() const;
  public:
  void clear_extra_term_score();
  float extra_term_score() const;
  void set_extra_term_score(float value);
  private:
  float _internal_extra_term_score() const;
  void _internal_set_extra_term_score(float value);
  public:

  // optional float min_space_align_score = 18 [default = -1];
  bool has_min_space_align_score() const;
  private:
  bool _internal_has_min_space_align_score() const;
  public:
  void clear_min_space_align_score();
  float min_space_align_score() const;
  void set_min_space_align_score(float value);
  private:
  float _internal_min_space_align_score() const;
  void _internal_set_min_space_align_score(float value);
  public:

  // optional float key_error_sigma = 1 [default = 0.9];
  bool has_key_error_sigma() const;
  private:
  bool _internal_has_key_error_sigma() const;
  public:
  void clear_key_error_sigma();
  float key_error_sigma() const;
  void set_key_error_sigma(float value);
  private:
  float _internal_key_error_sigma() const;
  void _internal_set_key_error_sigma(float value);
  public:

  // optional float direction_error_sigma = 2 [default = 0.7];
  bool has_direction_error_sigma() const;
  private:
  bool _internal_has_direction_error_sigma() const;
  public:
  void clear_direction_error_sigma();
  float direction_error_sigma() const;
  void set_direction_error_sigma(float value);
  private:
  float _internal_direction_error_sigma() const;
  void _internal_set_direction_error_sigma(float value);
  public:

  // optional float skip_pause_score = 3 [default = -2];
  bool has_skip_pause_score() const;
  private:
  bool _internal_has_skip_pause_score() const;
  public:
  void clear_skip_pause_score();
  float skip_pause_score() const;
  void set_skip_pause_score(float value);
  private:
  float _internal_skip_pause_score() const;
  void _internal_set_skip_pause_score(float value);
  public:

  // optional float skip_corner_score = 4 [default = -4];
  bool has_skip_corner_score() const;
  private:
  bool _internal_has_skip_corner_score() const;
  public:
  void clear_skip_corner_score();
  float skip_corner_score() const;
  void set_skip_corner_score(float value);
  private:
  float _internal_skip_corner_score() const;
  void _internal_set_skip_corner_score(float value);
  public:

  // optional float precise_match_threshold = 6 [default = -2];
  bool has_precise_match_threshold() const;
  private:
  bool _internal_has_precise_match_threshold() const;
  public:
  void clear_precise_match_threshold();
  float precise_match_threshold() const;
  void set_precise_match_threshold(float value);
  private:
  float _internal_precise_match_threshold() const;
  void _internal_set_precise_match_threshold(float value);
  public:

  // optional float max_imprecise_match_penalty = 7 [default = -4];
  bool has_max_imprecise_match_penalty() const;
  private:
  bool _internal_has_max_imprecise_match_penalty() const;
  public:
  void clear_max_imprecise_match_penalty();
  float max_imprecise_match_penalty() const;
  void set_max_imprecise_match_penalty(float value);
  private:
  float _internal_max_imprecise_match_penalty() const;
  void _internal_set_max_imprecise_match_penalty(float value);
  public:

  // optional float min_curvature_for_corner = 10 [default = 0.392699];
  bool has_min_curvature_for_corner() const;
  private:
  bool _internal_has_min_curvature_for_corner() const;
  public:
  void clear_min_curvature_for_corner();
  float min_curvature_for_corner() const;
  void set_min_curvature_for_corner(float value);
  private:
  float _internal_min_curvature_for_corner() const;
  void _internal_set_min_curvature_for_corner(float value);
  public:

  // optional float pause_duration_in_millis = 11 [default = 200];
  bool has_pause_duration_in_millis() const;
  private:
  bool _internal_has_pause_duration_in_millis() const;
  public:
  void clear_pause_duration_in_millis();
  float pause_duration_in_millis() const;
  void set_pause_duration_in_millis(float value);
  private:
  float _internal_pause_duration_in_millis() const;
  void _internal_set_pause_duration_in_millis(float value);
  public:

  // optional float endpoint_offset_for_maxima = 12 [default = 2];
  bool has_endpoint_offset_for_maxima() const;
  private:
  bool _internal_has_endpoint_offset_for_maxima() const;
  public:
  void clear_endpoint_offset_for_maxima();
  float endpoint_offset_for_maxima() const;
  void set_endpoint_offset_for_maxima(float value);
  private:
  float _internal_endpoint_offset_for_maxima() const;
  void _internal_set_endpoint_offset_for_maxima(float value);
  public:

  // optional float min_align_key_score = 13 [default = -8];
  bool has_min_align_key_score() const;
  private:
  bool _internal_has_min_align_key_score() const;
  public:
  void clear_min_align_key_score();
  float min_align_key_score() const;
  void set_min_align_key_score(float value);
  private:
  float _internal_min_align_key_score() const;
  void _internal_set_min_align_key_score(float value);
  public:

  // optional float completion_score = 14 [default = -4];
  bool has_completion_score() const;
  private:
  bool _internal_has_completion_score() const;
  public:
  void clear_completion_score();
  float completion_score() const;
  void set_completion_score(float value);
  private:
  float _internal_completion_score() const;
  void _internal_set_completion_score(float value);
  public:

  // optional float first_point_weight = 15 [default = 2];
  bool has_first_point_weight() const;
  private:
  bool _internal_has_first_point_weight() const;
  public:
  void clear_first_point_weight();
  float first_point_weight() const;
  void set_first_point_weight(float value);
  private:
  float _internal_first_point_weight() const;
  void _internal_set_first_point_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GestureSpatialParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool allow_multi_term_;
  bool use_space_for_multi_term_;
  float extra_term_score_;
  float min_space_align_score_;
  float key_error_sigma_;
  float direction_error_sigma_;
  float skip_pause_score_;
  float skip_corner_score_;
  float precise_match_threshold_;
  float max_imprecise_match_penalty_;
  float min_curvature_for_corner_;
  float pause_duration_in_millis_;
  float endpoint_offset_for_maxima_;
  float min_align_key_score_;
  float completion_score_;
  float first_point_weight_;
  friend struct ::TableStruct_decoder_2dparams_2eproto;
};
// -------------------------------------------------------------------

class TapSpatialParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.TapSpatialParams) */ {
 public:
  inline TapSpatialParams() : TapSpatialParams(nullptr) {};
  virtual ~TapSpatialParams();

  TapSpatialParams(const TapSpatialParams& from);
  TapSpatialParams(TapSpatialParams&& from) noexcept
    : TapSpatialParams() {
    *this = ::std::move(from);
  }

  inline TapSpatialParams& operator=(const TapSpatialParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TapSpatialParams& operator=(TapSpatialParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TapSpatialParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TapSpatialParams* internal_default_instance() {
    return reinterpret_cast<const TapSpatialParams*>(
               &_TapSpatialParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TapSpatialParams& a, TapSpatialParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TapSpatialParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TapSpatialParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TapSpatialParams* New() const final {
    return CreateMaybeMessage<TapSpatialParams>(nullptr);
  }

  TapSpatialParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TapSpatialParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TapSpatialParams& from);
  void MergeFrom(const TapSpatialParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TapSpatialParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TapSpatialParams";
  }
  protected:
  explicit TapSpatialParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decoder_2dparams_2eproto);
    return ::descriptor_table_decoder_2dparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraTermScoreFieldNumber = 10,
    kKeyErrorSigmaFieldNumber = 1,
    kNonLiteralMatchPenaltyFieldNumber = 2,
    kOmissionScoreFieldNumber = 3,
    kOmissionSkippableScoreFieldNumber = 4,
    kInsertionScoreFieldNumber = 5,
    kSubstitutionScoreFieldNumber = 6,
    kMinAlignKeyScoreFieldNumber = 7,
    kCompletionScoreFieldNumber = 8,
    kAllowMultiTermFieldNumber = 9,
    kSpaceToNonspaceCorrectionScoreFieldNumber = 11,
  };
  // optional float extra_term_score = 10 [default = 0];
  bool has_extra_term_score() const;
  private:
  bool _internal_has_extra_term_score() const;
  public:
  void clear_extra_term_score();
  float extra_term_score() const;
  void set_extra_term_score(float value);
  private:
  float _internal_extra_term_score() const;
  void _internal_set_extra_term_score(float value);
  public:

  // optional float key_error_sigma = 1 [default = 0.7];
  bool has_key_error_sigma() const;
  private:
  bool _internal_has_key_error_sigma() const;
  public:
  void clear_key_error_sigma();
  float key_error_sigma() const;
  void set_key_error_sigma(float value);
  private:
  float _internal_key_error_sigma() const;
  void _internal_set_key_error_sigma(float value);
  public:

  // optional float non_literal_match_penalty = 2 [default = -4];
  bool has_non_literal_match_penalty() const;
  private:
  bool _internal_has_non_literal_match_penalty() const;
  public:
  void clear_non_literal_match_penalty();
  float non_literal_match_penalty() const;
  void set_non_literal_match_penalty(float value);
  private:
  float _internal_non_literal_match_penalty() const;
  void _internal_set_non_literal_match_penalty(float value);
  public:

  // optional float omission_score = 3 [default = -5];
  bool has_omission_score() const;
  private:
  bool _internal_has_omission_score() const;
  public:
  void clear_omission_score();
  float omission_score() const;
  void set_omission_score(float value);
  private:
  float _internal_omission_score() const;
  void _internal_set_omission_score(float value);
  public:

  // optional float omission_skippable_score = 4 [default = -0.5];
  bool has_omission_skippable_score() const;
  private:
  bool _internal_has_omission_skippable_score() const;
  public:
  void clear_omission_skippable_score();
  float omission_skippable_score() const;
  void set_omission_skippable_score(float value);
  private:
  float _internal_omission_skippable_score() const;
  void _internal_set_omission_skippable_score(float value);
  public:

  // optional float insertion_score = 5 [default = -8];
  bool has_insertion_score() const;
  private:
  bool _internal_has_insertion_score() const;
  public:
  void clear_insertion_score();
  float insertion_score() const;
  void set_insertion_score(float value);
  private:
  float _internal_insertion_score() const;
  void _internal_set_insertion_score(float value);
  public:

  // optional float substitution_score = 6 [default = -8];
  bool has_substitution_score() const;
  private:
  bool _internal_has_substitution_score() const;
  public:
  void clear_substitution_score();
  float substitution_score() const;
  void set_substitution_score(float value);
  private:
  float _internal_substitution_score() const;
  void _internal_set_substitution_score(float value);
  public:

  // optional float min_align_key_score = 7 [default = -8];
  bool has_min_align_key_score() const;
  private:
  bool _internal_has_min_align_key_score() const;
  public:
  void clear_min_align_key_score();
  float min_align_key_score() const;
  void set_min_align_key_score(float value);
  private:
  float _internal_min_align_key_score() const;
  void _internal_set_min_align_key_score(float value);
  public:

  // optional float completion_score = 8 [default = -2];
  bool has_completion_score() const;
  private:
  bool _internal_has_completion_score() const;
  public:
  void clear_completion_score();
  float completion_score() const;
  void set_completion_score(float value);
  private:
  float _internal_completion_score() const;
  void _internal_set_completion_score(float value);
  public:

  // optional bool allow_multi_term = 9 [default = true];
  bool has_allow_multi_term() const;
  private:
  bool _internal_has_allow_multi_term() const;
  public:
  void clear_allow_multi_term();
  bool allow_multi_term() const;
  void set_allow_multi_term(bool value);
  private:
  bool _internal_allow_multi_term() const;
  void _internal_set_allow_multi_term(bool value);
  public:

  // optional float space_to_nonspace_correction_score = 11 [default = -8];
  bool has_space_to_nonspace_correction_score() const;
  private:
  bool _internal_has_space_to_nonspace_correction_score() const;
  public:
  void clear_space_to_nonspace_correction_score();
  float space_to_nonspace_correction_score() const;
  void set_space_to_nonspace_correction_score(float value);
  private:
  float _internal_space_to_nonspace_correction_score() const;
  void _internal_set_space_to_nonspace_correction_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TapSpatialParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float extra_term_score_;
  float key_error_sigma_;
  float non_literal_match_penalty_;
  float omission_score_;
  float omission_skippable_score_;
  float insertion_score_;
  float substitution_score_;
  float min_align_key_score_;
  float completion_score_;
  bool allow_multi_term_;
  float space_to_nonspace_correction_score_;
  friend struct ::TableStruct_decoder_2dparams_2eproto;
};
// -------------------------------------------------------------------

class DecoderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DecoderParams) */ {
 public:
  inline DecoderParams() : DecoderParams(nullptr) {};
  virtual ~DecoderParams();

  DecoderParams(const DecoderParams& from);
  DecoderParams(DecoderParams&& from) noexcept
    : DecoderParams() {
    *this = ::std::move(from);
  }

  inline DecoderParams& operator=(const DecoderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecoderParams& operator=(DecoderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DecoderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecoderParams* internal_default_instance() {
    return reinterpret_cast<const DecoderParams*>(
               &_DecoderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DecoderParams& a, DecoderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DecoderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecoderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DecoderParams* New() const final {
    return CreateMaybeMessage<DecoderParams>(nullptr);
  }

  DecoderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DecoderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DecoderParams& from);
  void MergeFrom(const DecoderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecoderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DecoderParams";
  }
  protected:
  explicit DecoderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_decoder_2dparams_2eproto);
    return ::descriptor_table_decoder_2dparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGestureParamsFieldNumber = 10,
    kTapParamsFieldNumber = 11,
    kScoreToBeatAbsoluteFieldNumber = 13,
    kSampleDistanceInKeyWidthsFieldNumber = 1,
    kActiveBeamWidthFieldNumber = 2,
    kPrefixBeamWidthFieldNumber = 3,
    kTokenPoolCapacityFieldNumber = 4,
    kNumSuggestionsToReturnFieldNumber = 5,
    kScoreToBeatOffsetFieldNumber = 6,
    kScoreToBeatOffsetForCorrectionsFieldNumber = 7,
    kPrefixLmWeightFieldNumber = 8,
    kLexiconUnigramBackoffFieldNumber = 9,
    kMaxMultiTermTerminalsFieldNumber = 12,
  };
  // optional .proto.GestureSpatialParams gesture_params = 10;
  bool has_gesture_params() const;
  private:
  bool _internal_has_gesture_params() const;
  public:
  void clear_gesture_params();
  const ::proto::GestureSpatialParams& gesture_params() const;
  ::proto::GestureSpatialParams* release_gesture_params();
  ::proto::GestureSpatialParams* mutable_gesture_params();
  void set_allocated_gesture_params(::proto::GestureSpatialParams* gesture_params);
  private:
  const ::proto::GestureSpatialParams& _internal_gesture_params() const;
  ::proto::GestureSpatialParams* _internal_mutable_gesture_params();
  public:
  void unsafe_arena_set_allocated_gesture_params(
      ::proto::GestureSpatialParams* gesture_params);
  ::proto::GestureSpatialParams* unsafe_arena_release_gesture_params();

  // optional .proto.TapSpatialParams tap_params = 11;
  bool has_tap_params() const;
  private:
  bool _internal_has_tap_params() const;
  public:
  void clear_tap_params();
  const ::proto::TapSpatialParams& tap_params() const;
  ::proto::TapSpatialParams* release_tap_params();
  ::proto::TapSpatialParams* mutable_tap_params();
  void set_allocated_tap_params(::proto::TapSpatialParams* tap_params);
  private:
  const ::proto::TapSpatialParams& _internal_tap_params() const;
  ::proto::TapSpatialParams* _internal_mutable_tap_params();
  public:
  void unsafe_arena_set_allocated_tap_params(
      ::proto::TapSpatialParams* tap_params);
  ::proto::TapSpatialParams* unsafe_arena_release_tap_params();

  // optional float score_to_beat_absolute = 13 [default = -inf];
  bool has_score_to_beat_absolute() const;
  private:
  bool _internal_has_score_to_beat_absolute() const;
  public:
  void clear_score_to_beat_absolute();
  float score_to_beat_absolute() const;
  void set_score_to_beat_absolute(float value);
  private:
  float _internal_score_to_beat_absolute() const;
  void _internal_set_score_to_beat_absolute(float value);
  public:

  // optional float sample_distance_in_key_widths = 1 [default = 0.25];
  bool has_sample_distance_in_key_widths() const;
  private:
  bool _internal_has_sample_distance_in_key_widths() const;
  public:
  void clear_sample_distance_in_key_widths();
  float sample_distance_in_key_widths() const;
  void set_sample_distance_in_key_widths(float value);
  private:
  float _internal_sample_distance_in_key_widths() const;
  void _internal_set_sample_distance_in_key_widths(float value);
  public:

  // optional int32 active_beam_width = 2 [default = 100];
  bool has_active_beam_width() const;
  private:
  bool _internal_has_active_beam_width() const;
  public:
  void clear_active_beam_width();
  ::PROTOBUF_NAMESPACE_ID::int32 active_beam_width() const;
  void set_active_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_beam_width() const;
  void _internal_set_active_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 prefix_beam_width = 3 [default = 3];
  bool has_prefix_beam_width() const;
  private:
  bool _internal_has_prefix_beam_width() const;
  public:
  void clear_prefix_beam_width();
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_beam_width() const;
  void set_prefix_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prefix_beam_width() const;
  void _internal_set_prefix_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 token_pool_capacity = 4 [default = 1000];
  bool has_token_pool_capacity() const;
  private:
  bool _internal_has_token_pool_capacity() const;
  public:
  void clear_token_pool_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 token_pool_capacity() const;
  void set_token_pool_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_token_pool_capacity() const;
  void _internal_set_token_pool_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_suggestions_to_return = 5 [default = 20];
  bool has_num_suggestions_to_return() const;
  private:
  bool _internal_has_num_suggestions_to_return() const;
  public:
  void clear_num_suggestions_to_return();
  ::PROTOBUF_NAMESPACE_ID::int32 num_suggestions_to_return() const;
  void set_num_suggestions_to_return(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_suggestions_to_return() const;
  void _internal_set_num_suggestions_to_return(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float score_to_beat_offset = 6 [default = -12];
  bool has_score_to_beat_offset() const;
  private:
  bool _internal_has_score_to_beat_offset() const;
  public:
  void clear_score_to_beat_offset();
  float score_to_beat_offset() const;
  void set_score_to_beat_offset(float value);
  private:
  float _internal_score_to_beat_offset() const;
  void _internal_set_score_to_beat_offset(float value);
  public:

  // optional float score_to_beat_offset_for_corrections = 7 [default = -6];
  bool has_score_to_beat_offset_for_corrections() const;
  private:
  bool _internal_has_score_to_beat_offset_for_corrections() const;
  public:
  void clear_score_to_beat_offset_for_corrections();
  float score_to_beat_offset_for_corrections() const;
  void set_score_to_beat_offset_for_corrections(float value);
  private:
  float _internal_score_to_beat_offset_for_corrections() const;
  void _internal_set_score_to_beat_offset_for_corrections(float value);
  public:

  // optional float prefix_lm_weight = 8 [default = 0.5];
  bool has_prefix_lm_weight() const;
  private:
  bool _internal_has_prefix_lm_weight() const;
  public:
  void clear_prefix_lm_weight();
  float prefix_lm_weight() const;
  void set_prefix_lm_weight(float value);
  private:
  float _internal_prefix_lm_weight() const;
  void _internal_set_prefix_lm_weight(float value);
  public:

  // optional float lexicon_unigram_backoff = 9 [default = -5];
  bool has_lexicon_unigram_backoff() const;
  private:
  bool _internal_has_lexicon_unigram_backoff() const;
  public:
  void clear_lexicon_unigram_backoff();
  float lexicon_unigram_backoff() const;
  void set_lexicon_unigram_backoff(float value);
  private:
  float _internal_lexicon_unigram_backoff() const;
  void _internal_set_lexicon_unigram_backoff(float value);
  public:

  // optional int32 max_multi_term_terminals = 12 [default = 10];
  bool has_max_multi_term_terminals() const;
  private:
  bool _internal_has_max_multi_term_terminals() const;
  public:
  void clear_max_multi_term_terminals();
  ::PROTOBUF_NAMESPACE_ID::int32 max_multi_term_terminals() const;
  void set_max_multi_term_terminals(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_multi_term_terminals() const;
  void _internal_set_max_multi_term_terminals(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DecoderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::GestureSpatialParams* gesture_params_;
  ::proto::TapSpatialParams* tap_params_;
  float score_to_beat_absolute_;
  float sample_distance_in_key_widths_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_beam_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 prefix_beam_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 token_pool_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_suggestions_to_return_;
  float score_to_beat_offset_;
  float score_to_beat_offset_for_corrections_;
  float prefix_lm_weight_;
  float lexicon_unigram_backoff_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_multi_term_terminals_;
  friend struct ::TableStruct_decoder_2dparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GestureSpatialParams

// optional float key_error_sigma = 1 [default = 0.9];
inline bool GestureSpatialParams::_internal_has_key_error_sigma() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_key_error_sigma() const {
  return _internal_has_key_error_sigma();
}
inline void GestureSpatialParams::clear_key_error_sigma() {
  key_error_sigma_ = 0.9f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float GestureSpatialParams::_internal_key_error_sigma() const {
  return key_error_sigma_;
}
inline float GestureSpatialParams::key_error_sigma() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.key_error_sigma)
  return _internal_key_error_sigma();
}
inline void GestureSpatialParams::_internal_set_key_error_sigma(float value) {
  _has_bits_[0] |= 0x00000010u;
  key_error_sigma_ = value;
}
inline void GestureSpatialParams::set_key_error_sigma(float value) {
  _internal_set_key_error_sigma(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.key_error_sigma)
}

// optional float direction_error_sigma = 2 [default = 0.7];
inline bool GestureSpatialParams::_internal_has_direction_error_sigma() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_direction_error_sigma() const {
  return _internal_has_direction_error_sigma();
}
inline void GestureSpatialParams::clear_direction_error_sigma() {
  direction_error_sigma_ = 0.7f;
  _has_bits_[0] &= ~0x00000020u;
}
inline float GestureSpatialParams::_internal_direction_error_sigma() const {
  return direction_error_sigma_;
}
inline float GestureSpatialParams::direction_error_sigma() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.direction_error_sigma)
  return _internal_direction_error_sigma();
}
inline void GestureSpatialParams::_internal_set_direction_error_sigma(float value) {
  _has_bits_[0] |= 0x00000020u;
  direction_error_sigma_ = value;
}
inline void GestureSpatialParams::set_direction_error_sigma(float value) {
  _internal_set_direction_error_sigma(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.direction_error_sigma)
}

// optional float skip_pause_score = 3 [default = -2];
inline bool GestureSpatialParams::_internal_has_skip_pause_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_skip_pause_score() const {
  return _internal_has_skip_pause_score();
}
inline void GestureSpatialParams::clear_skip_pause_score() {
  skip_pause_score_ = -2;
  _has_bits_[0] &= ~0x00000040u;
}
inline float GestureSpatialParams::_internal_skip_pause_score() const {
  return skip_pause_score_;
}
inline float GestureSpatialParams::skip_pause_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.skip_pause_score)
  return _internal_skip_pause_score();
}
inline void GestureSpatialParams::_internal_set_skip_pause_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  skip_pause_score_ = value;
}
inline void GestureSpatialParams::set_skip_pause_score(float value) {
  _internal_set_skip_pause_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.skip_pause_score)
}

// optional float skip_corner_score = 4 [default = -4];
inline bool GestureSpatialParams::_internal_has_skip_corner_score() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_skip_corner_score() const {
  return _internal_has_skip_corner_score();
}
inline void GestureSpatialParams::clear_skip_corner_score() {
  skip_corner_score_ = -4;
  _has_bits_[0] &= ~0x00000080u;
}
inline float GestureSpatialParams::_internal_skip_corner_score() const {
  return skip_corner_score_;
}
inline float GestureSpatialParams::skip_corner_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.skip_corner_score)
  return _internal_skip_corner_score();
}
inline void GestureSpatialParams::_internal_set_skip_corner_score(float value) {
  _has_bits_[0] |= 0x00000080u;
  skip_corner_score_ = value;
}
inline void GestureSpatialParams::set_skip_corner_score(float value) {
  _internal_set_skip_corner_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.skip_corner_score)
}

// optional float precise_match_threshold = 6 [default = -2];
inline bool GestureSpatialParams::_internal_has_precise_match_threshold() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_precise_match_threshold() const {
  return _internal_has_precise_match_threshold();
}
inline void GestureSpatialParams::clear_precise_match_threshold() {
  precise_match_threshold_ = -2;
  _has_bits_[0] &= ~0x00000100u;
}
inline float GestureSpatialParams::_internal_precise_match_threshold() const {
  return precise_match_threshold_;
}
inline float GestureSpatialParams::precise_match_threshold() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.precise_match_threshold)
  return _internal_precise_match_threshold();
}
inline void GestureSpatialParams::_internal_set_precise_match_threshold(float value) {
  _has_bits_[0] |= 0x00000100u;
  precise_match_threshold_ = value;
}
inline void GestureSpatialParams::set_precise_match_threshold(float value) {
  _internal_set_precise_match_threshold(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.precise_match_threshold)
}

// optional float max_imprecise_match_penalty = 7 [default = -4];
inline bool GestureSpatialParams::_internal_has_max_imprecise_match_penalty() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_max_imprecise_match_penalty() const {
  return _internal_has_max_imprecise_match_penalty();
}
inline void GestureSpatialParams::clear_max_imprecise_match_penalty() {
  max_imprecise_match_penalty_ = -4;
  _has_bits_[0] &= ~0x00000200u;
}
inline float GestureSpatialParams::_internal_max_imprecise_match_penalty() const {
  return max_imprecise_match_penalty_;
}
inline float GestureSpatialParams::max_imprecise_match_penalty() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.max_imprecise_match_penalty)
  return _internal_max_imprecise_match_penalty();
}
inline void GestureSpatialParams::_internal_set_max_imprecise_match_penalty(float value) {
  _has_bits_[0] |= 0x00000200u;
  max_imprecise_match_penalty_ = value;
}
inline void GestureSpatialParams::set_max_imprecise_match_penalty(float value) {
  _internal_set_max_imprecise_match_penalty(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.max_imprecise_match_penalty)
}

// optional float min_curvature_for_corner = 10 [default = 0.392699];
inline bool GestureSpatialParams::_internal_has_min_curvature_for_corner() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_min_curvature_for_corner() const {
  return _internal_has_min_curvature_for_corner();
}
inline void GestureSpatialParams::clear_min_curvature_for_corner() {
  min_curvature_for_corner_ = 0.392699f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float GestureSpatialParams::_internal_min_curvature_for_corner() const {
  return min_curvature_for_corner_;
}
inline float GestureSpatialParams::min_curvature_for_corner() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.min_curvature_for_corner)
  return _internal_min_curvature_for_corner();
}
inline void GestureSpatialParams::_internal_set_min_curvature_for_corner(float value) {
  _has_bits_[0] |= 0x00000400u;
  min_curvature_for_corner_ = value;
}
inline void GestureSpatialParams::set_min_curvature_for_corner(float value) {
  _internal_set_min_curvature_for_corner(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.min_curvature_for_corner)
}

// optional float pause_duration_in_millis = 11 [default = 200];
inline bool GestureSpatialParams::_internal_has_pause_duration_in_millis() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_pause_duration_in_millis() const {
  return _internal_has_pause_duration_in_millis();
}
inline void GestureSpatialParams::clear_pause_duration_in_millis() {
  pause_duration_in_millis_ = 200;
  _has_bits_[0] &= ~0x00000800u;
}
inline float GestureSpatialParams::_internal_pause_duration_in_millis() const {
  return pause_duration_in_millis_;
}
inline float GestureSpatialParams::pause_duration_in_millis() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.pause_duration_in_millis)
  return _internal_pause_duration_in_millis();
}
inline void GestureSpatialParams::_internal_set_pause_duration_in_millis(float value) {
  _has_bits_[0] |= 0x00000800u;
  pause_duration_in_millis_ = value;
}
inline void GestureSpatialParams::set_pause_duration_in_millis(float value) {
  _internal_set_pause_duration_in_millis(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.pause_duration_in_millis)
}

// optional float endpoint_offset_for_maxima = 12 [default = 2];
inline bool GestureSpatialParams::_internal_has_endpoint_offset_for_maxima() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_endpoint_offset_for_maxima() const {
  return _internal_has_endpoint_offset_for_maxima();
}
inline void GestureSpatialParams::clear_endpoint_offset_for_maxima() {
  endpoint_offset_for_maxima_ = 2;
  _has_bits_[0] &= ~0x00001000u;
}
inline float GestureSpatialParams::_internal_endpoint_offset_for_maxima() const {
  return endpoint_offset_for_maxima_;
}
inline float GestureSpatialParams::endpoint_offset_for_maxima() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.endpoint_offset_for_maxima)
  return _internal_endpoint_offset_for_maxima();
}
inline void GestureSpatialParams::_internal_set_endpoint_offset_for_maxima(float value) {
  _has_bits_[0] |= 0x00001000u;
  endpoint_offset_for_maxima_ = value;
}
inline void GestureSpatialParams::set_endpoint_offset_for_maxima(float value) {
  _internal_set_endpoint_offset_for_maxima(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.endpoint_offset_for_maxima)
}

// optional float min_align_key_score = 13 [default = -8];
inline bool GestureSpatialParams::_internal_has_min_align_key_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_min_align_key_score() const {
  return _internal_has_min_align_key_score();
}
inline void GestureSpatialParams::clear_min_align_key_score() {
  min_align_key_score_ = -8;
  _has_bits_[0] &= ~0x00002000u;
}
inline float GestureSpatialParams::_internal_min_align_key_score() const {
  return min_align_key_score_;
}
inline float GestureSpatialParams::min_align_key_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.min_align_key_score)
  return _internal_min_align_key_score();
}
inline void GestureSpatialParams::_internal_set_min_align_key_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  min_align_key_score_ = value;
}
inline void GestureSpatialParams::set_min_align_key_score(float value) {
  _internal_set_min_align_key_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.min_align_key_score)
}

// optional float completion_score = 14 [default = -4];
inline bool GestureSpatialParams::_internal_has_completion_score() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_completion_score() const {
  return _internal_has_completion_score();
}
inline void GestureSpatialParams::clear_completion_score() {
  completion_score_ = -4;
  _has_bits_[0] &= ~0x00004000u;
}
inline float GestureSpatialParams::_internal_completion_score() const {
  return completion_score_;
}
inline float GestureSpatialParams::completion_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.completion_score)
  return _internal_completion_score();
}
inline void GestureSpatialParams::_internal_set_completion_score(float value) {
  _has_bits_[0] |= 0x00004000u;
  completion_score_ = value;
}
inline void GestureSpatialParams::set_completion_score(float value) {
  _internal_set_completion_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.completion_score)
}

// optional float first_point_weight = 15 [default = 2];
inline bool GestureSpatialParams::_internal_has_first_point_weight() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_first_point_weight() const {
  return _internal_has_first_point_weight();
}
inline void GestureSpatialParams::clear_first_point_weight() {
  first_point_weight_ = 2;
  _has_bits_[0] &= ~0x00008000u;
}
inline float GestureSpatialParams::_internal_first_point_weight() const {
  return first_point_weight_;
}
inline float GestureSpatialParams::first_point_weight() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.first_point_weight)
  return _internal_first_point_weight();
}
inline void GestureSpatialParams::_internal_set_first_point_weight(float value) {
  _has_bits_[0] |= 0x00008000u;
  first_point_weight_ = value;
}
inline void GestureSpatialParams::set_first_point_weight(float value) {
  _internal_set_first_point_weight(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.first_point_weight)
}

// optional bool allow_multi_term = 16 [default = false];
inline bool GestureSpatialParams::_internal_has_allow_multi_term() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_allow_multi_term() const {
  return _internal_has_allow_multi_term();
}
inline void GestureSpatialParams::clear_allow_multi_term() {
  allow_multi_term_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool GestureSpatialParams::_internal_allow_multi_term() const {
  return allow_multi_term_;
}
inline bool GestureSpatialParams::allow_multi_term() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.allow_multi_term)
  return _internal_allow_multi_term();
}
inline void GestureSpatialParams::_internal_set_allow_multi_term(bool value) {
  _has_bits_[0] |= 0x00000001u;
  allow_multi_term_ = value;
}
inline void GestureSpatialParams::set_allow_multi_term(bool value) {
  _internal_set_allow_multi_term(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.allow_multi_term)
}

// optional bool use_space_for_multi_term = 17 [default = false];
inline bool GestureSpatialParams::_internal_has_use_space_for_multi_term() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_use_space_for_multi_term() const {
  return _internal_has_use_space_for_multi_term();
}
inline void GestureSpatialParams::clear_use_space_for_multi_term() {
  use_space_for_multi_term_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool GestureSpatialParams::_internal_use_space_for_multi_term() const {
  return use_space_for_multi_term_;
}
inline bool GestureSpatialParams::use_space_for_multi_term() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.use_space_for_multi_term)
  return _internal_use_space_for_multi_term();
}
inline void GestureSpatialParams::_internal_set_use_space_for_multi_term(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_space_for_multi_term_ = value;
}
inline void GestureSpatialParams::set_use_space_for_multi_term(bool value) {
  _internal_set_use_space_for_multi_term(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.use_space_for_multi_term)
}

// optional float min_space_align_score = 18 [default = -1];
inline bool GestureSpatialParams::_internal_has_min_space_align_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_min_space_align_score() const {
  return _internal_has_min_space_align_score();
}
inline void GestureSpatialParams::clear_min_space_align_score() {
  min_space_align_score_ = -1;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GestureSpatialParams::_internal_min_space_align_score() const {
  return min_space_align_score_;
}
inline float GestureSpatialParams::min_space_align_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.min_space_align_score)
  return _internal_min_space_align_score();
}
inline void GestureSpatialParams::_internal_set_min_space_align_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  min_space_align_score_ = value;
}
inline void GestureSpatialParams::set_min_space_align_score(float value) {
  _internal_set_min_space_align_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.min_space_align_score)
}

// optional float extra_term_score = 19 [default = 0];
inline bool GestureSpatialParams::_internal_has_extra_term_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GestureSpatialParams::has_extra_term_score() const {
  return _internal_has_extra_term_score();
}
inline void GestureSpatialParams::clear_extra_term_score() {
  extra_term_score_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GestureSpatialParams::_internal_extra_term_score() const {
  return extra_term_score_;
}
inline float GestureSpatialParams::extra_term_score() const {
  // @@protoc_insertion_point(field_get:proto.GestureSpatialParams.extra_term_score)
  return _internal_extra_term_score();
}
inline void GestureSpatialParams::_internal_set_extra_term_score(float value) {
  _has_bits_[0] |= 0x00000004u;
  extra_term_score_ = value;
}
inline void GestureSpatialParams::set_extra_term_score(float value) {
  _internal_set_extra_term_score(value);
  // @@protoc_insertion_point(field_set:proto.GestureSpatialParams.extra_term_score)
}

// -------------------------------------------------------------------

// TapSpatialParams

// optional float key_error_sigma = 1 [default = 0.7];
inline bool TapSpatialParams::_internal_has_key_error_sigma() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TapSpatialParams::has_key_error_sigma() const {
  return _internal_has_key_error_sigma();
}
inline void TapSpatialParams::clear_key_error_sigma() {
  key_error_sigma_ = 0.7f;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TapSpatialParams::_internal_key_error_sigma() const {
  return key_error_sigma_;
}
inline float TapSpatialParams::key_error_sigma() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.key_error_sigma)
  return _internal_key_error_sigma();
}
inline void TapSpatialParams::_internal_set_key_error_sigma(float value) {
  _has_bits_[0] |= 0x00000002u;
  key_error_sigma_ = value;
}
inline void TapSpatialParams::set_key_error_sigma(float value) {
  _internal_set_key_error_sigma(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.key_error_sigma)
}

// optional float non_literal_match_penalty = 2 [default = -4];
inline bool TapSpatialParams::_internal_has_non_literal_match_penalty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TapSpatialParams::has_non_literal_match_penalty() const {
  return _internal_has_non_literal_match_penalty();
}
inline void TapSpatialParams::clear_non_literal_match_penalty() {
  non_literal_match_penalty_ = -4;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TapSpatialParams::_internal_non_literal_match_penalty() const {
  return non_literal_match_penalty_;
}
inline float TapSpatialParams::non_literal_match_penalty() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.non_literal_match_penalty)
  return _internal_non_literal_match_penalty();
}
inline void TapSpatialParams::_internal_set_non_literal_match_penalty(float value) {
  _has_bits_[0] |= 0x00000004u;
  non_literal_match_penalty_ = value;
}
inline void TapSpatialParams::set_non_literal_match_penalty(float value) {
  _internal_set_non_literal_match_penalty(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.non_literal_match_penalty)
}

// optional float omission_score = 3 [default = -5];
inline bool TapSpatialParams::_internal_has_omission_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TapSpatialParams::has_omission_score() const {
  return _internal_has_omission_score();
}
inline void TapSpatialParams::clear_omission_score() {
  omission_score_ = -5;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TapSpatialParams::_internal_omission_score() const {
  return omission_score_;
}
inline float TapSpatialParams::omission_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.omission_score)
  return _internal_omission_score();
}
inline void TapSpatialParams::_internal_set_omission_score(float value) {
  _has_bits_[0] |= 0x00000008u;
  omission_score_ = value;
}
inline void TapSpatialParams::set_omission_score(float value) {
  _internal_set_omission_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.omission_score)
}

// optional float omission_skippable_score = 4 [default = -0.5];
inline bool TapSpatialParams::_internal_has_omission_skippable_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TapSpatialParams::has_omission_skippable_score() const {
  return _internal_has_omission_skippable_score();
}
inline void TapSpatialParams::clear_omission_skippable_score() {
  omission_skippable_score_ = -0.5f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TapSpatialParams::_internal_omission_skippable_score() const {
  return omission_skippable_score_;
}
inline float TapSpatialParams::omission_skippable_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.omission_skippable_score)
  return _internal_omission_skippable_score();
}
inline void TapSpatialParams::_internal_set_omission_skippable_score(float value) {
  _has_bits_[0] |= 0x00000010u;
  omission_skippable_score_ = value;
}
inline void TapSpatialParams::set_omission_skippable_score(float value) {
  _internal_set_omission_skippable_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.omission_skippable_score)
}

// optional float insertion_score = 5 [default = -8];
inline bool TapSpatialParams::_internal_has_insertion_score() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TapSpatialParams::has_insertion_score() const {
  return _internal_has_insertion_score();
}
inline void TapSpatialParams::clear_insertion_score() {
  insertion_score_ = -8;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TapSpatialParams::_internal_insertion_score() const {
  return insertion_score_;
}
inline float TapSpatialParams::insertion_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.insertion_score)
  return _internal_insertion_score();
}
inline void TapSpatialParams::_internal_set_insertion_score(float value) {
  _has_bits_[0] |= 0x00000020u;
  insertion_score_ = value;
}
inline void TapSpatialParams::set_insertion_score(float value) {
  _internal_set_insertion_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.insertion_score)
}

// optional float substitution_score = 6 [default = -8];
inline bool TapSpatialParams::_internal_has_substitution_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TapSpatialParams::has_substitution_score() const {
  return _internal_has_substitution_score();
}
inline void TapSpatialParams::clear_substitution_score() {
  substitution_score_ = -8;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TapSpatialParams::_internal_substitution_score() const {
  return substitution_score_;
}
inline float TapSpatialParams::substitution_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.substitution_score)
  return _internal_substitution_score();
}
inline void TapSpatialParams::_internal_set_substitution_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  substitution_score_ = value;
}
inline void TapSpatialParams::set_substitution_score(float value) {
  _internal_set_substitution_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.substitution_score)
}

// optional float min_align_key_score = 7 [default = -8];
inline bool TapSpatialParams::_internal_has_min_align_key_score() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TapSpatialParams::has_min_align_key_score() const {
  return _internal_has_min_align_key_score();
}
inline void TapSpatialParams::clear_min_align_key_score() {
  min_align_key_score_ = -8;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TapSpatialParams::_internal_min_align_key_score() const {
  return min_align_key_score_;
}
inline float TapSpatialParams::min_align_key_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.min_align_key_score)
  return _internal_min_align_key_score();
}
inline void TapSpatialParams::_internal_set_min_align_key_score(float value) {
  _has_bits_[0] |= 0x00000080u;
  min_align_key_score_ = value;
}
inline void TapSpatialParams::set_min_align_key_score(float value) {
  _internal_set_min_align_key_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.min_align_key_score)
}

// optional float completion_score = 8 [default = -2];
inline bool TapSpatialParams::_internal_has_completion_score() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TapSpatialParams::has_completion_score() const {
  return _internal_has_completion_score();
}
inline void TapSpatialParams::clear_completion_score() {
  completion_score_ = -2;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TapSpatialParams::_internal_completion_score() const {
  return completion_score_;
}
inline float TapSpatialParams::completion_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.completion_score)
  return _internal_completion_score();
}
inline void TapSpatialParams::_internal_set_completion_score(float value) {
  _has_bits_[0] |= 0x00000100u;
  completion_score_ = value;
}
inline void TapSpatialParams::set_completion_score(float value) {
  _internal_set_completion_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.completion_score)
}

// optional bool allow_multi_term = 9 [default = true];
inline bool TapSpatialParams::_internal_has_allow_multi_term() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TapSpatialParams::has_allow_multi_term() const {
  return _internal_has_allow_multi_term();
}
inline void TapSpatialParams::clear_allow_multi_term() {
  allow_multi_term_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TapSpatialParams::_internal_allow_multi_term() const {
  return allow_multi_term_;
}
inline bool TapSpatialParams::allow_multi_term() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.allow_multi_term)
  return _internal_allow_multi_term();
}
inline void TapSpatialParams::_internal_set_allow_multi_term(bool value) {
  _has_bits_[0] |= 0x00000200u;
  allow_multi_term_ = value;
}
inline void TapSpatialParams::set_allow_multi_term(bool value) {
  _internal_set_allow_multi_term(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.allow_multi_term)
}

// optional float extra_term_score = 10 [default = 0];
inline bool TapSpatialParams::_internal_has_extra_term_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TapSpatialParams::has_extra_term_score() const {
  return _internal_has_extra_term_score();
}
inline void TapSpatialParams::clear_extra_term_score() {
  extra_term_score_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TapSpatialParams::_internal_extra_term_score() const {
  return extra_term_score_;
}
inline float TapSpatialParams::extra_term_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.extra_term_score)
  return _internal_extra_term_score();
}
inline void TapSpatialParams::_internal_set_extra_term_score(float value) {
  _has_bits_[0] |= 0x00000001u;
  extra_term_score_ = value;
}
inline void TapSpatialParams::set_extra_term_score(float value) {
  _internal_set_extra_term_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.extra_term_score)
}

// optional float space_to_nonspace_correction_score = 11 [default = -8];
inline bool TapSpatialParams::_internal_has_space_to_nonspace_correction_score() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TapSpatialParams::has_space_to_nonspace_correction_score() const {
  return _internal_has_space_to_nonspace_correction_score();
}
inline void TapSpatialParams::clear_space_to_nonspace_correction_score() {
  space_to_nonspace_correction_score_ = -8;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TapSpatialParams::_internal_space_to_nonspace_correction_score() const {
  return space_to_nonspace_correction_score_;
}
inline float TapSpatialParams::space_to_nonspace_correction_score() const {
  // @@protoc_insertion_point(field_get:proto.TapSpatialParams.space_to_nonspace_correction_score)
  return _internal_space_to_nonspace_correction_score();
}
inline void TapSpatialParams::_internal_set_space_to_nonspace_correction_score(float value) {
  _has_bits_[0] |= 0x00000400u;
  space_to_nonspace_correction_score_ = value;
}
inline void TapSpatialParams::set_space_to_nonspace_correction_score(float value) {
  _internal_set_space_to_nonspace_correction_score(value);
  // @@protoc_insertion_point(field_set:proto.TapSpatialParams.space_to_nonspace_correction_score)
}

// -------------------------------------------------------------------

// DecoderParams

// optional float sample_distance_in_key_widths = 1 [default = 0.25];
inline bool DecoderParams::_internal_has_sample_distance_in_key_widths() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DecoderParams::has_sample_distance_in_key_widths() const {
  return _internal_has_sample_distance_in_key_widths();
}
inline void DecoderParams::clear_sample_distance_in_key_widths() {
  sample_distance_in_key_widths_ = 0.25f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DecoderParams::_internal_sample_distance_in_key_widths() const {
  return sample_distance_in_key_widths_;
}
inline float DecoderParams::sample_distance_in_key_widths() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.sample_distance_in_key_widths)
  return _internal_sample_distance_in_key_widths();
}
inline void DecoderParams::_internal_set_sample_distance_in_key_widths(float value) {
  _has_bits_[0] |= 0x00000008u;
  sample_distance_in_key_widths_ = value;
}
inline void DecoderParams::set_sample_distance_in_key_widths(float value) {
  _internal_set_sample_distance_in_key_widths(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.sample_distance_in_key_widths)
}

// optional int32 active_beam_width = 2 [default = 100];
inline bool DecoderParams::_internal_has_active_beam_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DecoderParams::has_active_beam_width() const {
  return _internal_has_active_beam_width();
}
inline void DecoderParams::clear_active_beam_width() {
  active_beam_width_ = 100;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::_internal_active_beam_width() const {
  return active_beam_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::active_beam_width() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.active_beam_width)
  return _internal_active_beam_width();
}
inline void DecoderParams::_internal_set_active_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  active_beam_width_ = value;
}
inline void DecoderParams::set_active_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_beam_width(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.active_beam_width)
}

// optional int32 prefix_beam_width = 3 [default = 3];
inline bool DecoderParams::_internal_has_prefix_beam_width() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DecoderParams::has_prefix_beam_width() const {
  return _internal_has_prefix_beam_width();
}
inline void DecoderParams::clear_prefix_beam_width() {
  prefix_beam_width_ = 3;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::_internal_prefix_beam_width() const {
  return prefix_beam_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::prefix_beam_width() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.prefix_beam_width)
  return _internal_prefix_beam_width();
}
inline void DecoderParams::_internal_set_prefix_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  prefix_beam_width_ = value;
}
inline void DecoderParams::set_prefix_beam_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prefix_beam_width(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.prefix_beam_width)
}

// optional int32 token_pool_capacity = 4 [default = 1000];
inline bool DecoderParams::_internal_has_token_pool_capacity() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DecoderParams::has_token_pool_capacity() const {
  return _internal_has_token_pool_capacity();
}
inline void DecoderParams::clear_token_pool_capacity() {
  token_pool_capacity_ = 1000;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::_internal_token_pool_capacity() const {
  return token_pool_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::token_pool_capacity() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.token_pool_capacity)
  return _internal_token_pool_capacity();
}
inline void DecoderParams::_internal_set_token_pool_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  token_pool_capacity_ = value;
}
inline void DecoderParams::set_token_pool_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_token_pool_capacity(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.token_pool_capacity)
}

// optional int32 num_suggestions_to_return = 5 [default = 20];
inline bool DecoderParams::_internal_has_num_suggestions_to_return() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DecoderParams::has_num_suggestions_to_return() const {
  return _internal_has_num_suggestions_to_return();
}
inline void DecoderParams::clear_num_suggestions_to_return() {
  num_suggestions_to_return_ = 20;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::_internal_num_suggestions_to_return() const {
  return num_suggestions_to_return_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::num_suggestions_to_return() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.num_suggestions_to_return)
  return _internal_num_suggestions_to_return();
}
inline void DecoderParams::_internal_set_num_suggestions_to_return(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_suggestions_to_return_ = value;
}
inline void DecoderParams::set_num_suggestions_to_return(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_suggestions_to_return(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.num_suggestions_to_return)
}

// optional float score_to_beat_offset = 6 [default = -12];
inline bool DecoderParams::_internal_has_score_to_beat_offset() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DecoderParams::has_score_to_beat_offset() const {
  return _internal_has_score_to_beat_offset();
}
inline void DecoderParams::clear_score_to_beat_offset() {
  score_to_beat_offset_ = -12;
  _has_bits_[0] &= ~0x00000100u;
}
inline float DecoderParams::_internal_score_to_beat_offset() const {
  return score_to_beat_offset_;
}
inline float DecoderParams::score_to_beat_offset() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.score_to_beat_offset)
  return _internal_score_to_beat_offset();
}
inline void DecoderParams::_internal_set_score_to_beat_offset(float value) {
  _has_bits_[0] |= 0x00000100u;
  score_to_beat_offset_ = value;
}
inline void DecoderParams::set_score_to_beat_offset(float value) {
  _internal_set_score_to_beat_offset(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.score_to_beat_offset)
}

// optional float score_to_beat_offset_for_corrections = 7 [default = -6];
inline bool DecoderParams::_internal_has_score_to_beat_offset_for_corrections() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DecoderParams::has_score_to_beat_offset_for_corrections() const {
  return _internal_has_score_to_beat_offset_for_corrections();
}
inline void DecoderParams::clear_score_to_beat_offset_for_corrections() {
  score_to_beat_offset_for_corrections_ = -6;
  _has_bits_[0] &= ~0x00000200u;
}
inline float DecoderParams::_internal_score_to_beat_offset_for_corrections() const {
  return score_to_beat_offset_for_corrections_;
}
inline float DecoderParams::score_to_beat_offset_for_corrections() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.score_to_beat_offset_for_corrections)
  return _internal_score_to_beat_offset_for_corrections();
}
inline void DecoderParams::_internal_set_score_to_beat_offset_for_corrections(float value) {
  _has_bits_[0] |= 0x00000200u;
  score_to_beat_offset_for_corrections_ = value;
}
inline void DecoderParams::set_score_to_beat_offset_for_corrections(float value) {
  _internal_set_score_to_beat_offset_for_corrections(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.score_to_beat_offset_for_corrections)
}

// optional float prefix_lm_weight = 8 [default = 0.5];
inline bool DecoderParams::_internal_has_prefix_lm_weight() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DecoderParams::has_prefix_lm_weight() const {
  return _internal_has_prefix_lm_weight();
}
inline void DecoderParams::clear_prefix_lm_weight() {
  prefix_lm_weight_ = 0.5f;
  _has_bits_[0] &= ~0x00000400u;
}
inline float DecoderParams::_internal_prefix_lm_weight() const {
  return prefix_lm_weight_;
}
inline float DecoderParams::prefix_lm_weight() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.prefix_lm_weight)
  return _internal_prefix_lm_weight();
}
inline void DecoderParams::_internal_set_prefix_lm_weight(float value) {
  _has_bits_[0] |= 0x00000400u;
  prefix_lm_weight_ = value;
}
inline void DecoderParams::set_prefix_lm_weight(float value) {
  _internal_set_prefix_lm_weight(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.prefix_lm_weight)
}

// optional float lexicon_unigram_backoff = 9 [default = -5];
inline bool DecoderParams::_internal_has_lexicon_unigram_backoff() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DecoderParams::has_lexicon_unigram_backoff() const {
  return _internal_has_lexicon_unigram_backoff();
}
inline void DecoderParams::clear_lexicon_unigram_backoff() {
  lexicon_unigram_backoff_ = -5;
  _has_bits_[0] &= ~0x00000800u;
}
inline float DecoderParams::_internal_lexicon_unigram_backoff() const {
  return lexicon_unigram_backoff_;
}
inline float DecoderParams::lexicon_unigram_backoff() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.lexicon_unigram_backoff)
  return _internal_lexicon_unigram_backoff();
}
inline void DecoderParams::_internal_set_lexicon_unigram_backoff(float value) {
  _has_bits_[0] |= 0x00000800u;
  lexicon_unigram_backoff_ = value;
}
inline void DecoderParams::set_lexicon_unigram_backoff(float value) {
  _internal_set_lexicon_unigram_backoff(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.lexicon_unigram_backoff)
}

// optional .proto.GestureSpatialParams gesture_params = 10;
inline bool DecoderParams::_internal_has_gesture_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gesture_params_ != nullptr);
  return value;
}
inline bool DecoderParams::has_gesture_params() const {
  return _internal_has_gesture_params();
}
inline void DecoderParams::clear_gesture_params() {
  if (gesture_params_ != nullptr) gesture_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::proto::GestureSpatialParams& DecoderParams::_internal_gesture_params() const {
  const ::proto::GestureSpatialParams* p = gesture_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::GestureSpatialParams*>(
      &::proto::_GestureSpatialParams_default_instance_);
}
inline const ::proto::GestureSpatialParams& DecoderParams::gesture_params() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.gesture_params)
  return _internal_gesture_params();
}
inline void DecoderParams::unsafe_arena_set_allocated_gesture_params(
    ::proto::GestureSpatialParams* gesture_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_params_);
  }
  gesture_params_ = gesture_params;
  if (gesture_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DecoderParams.gesture_params)
}
inline ::proto::GestureSpatialParams* DecoderParams::release_gesture_params() {
  auto temp = unsafe_arena_release_gesture_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::GestureSpatialParams* DecoderParams::unsafe_arena_release_gesture_params() {
  // @@protoc_insertion_point(field_release:proto.DecoderParams.gesture_params)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::GestureSpatialParams* temp = gesture_params_;
  gesture_params_ = nullptr;
  return temp;
}
inline ::proto::GestureSpatialParams* DecoderParams::_internal_mutable_gesture_params() {
  _has_bits_[0] |= 0x00000001u;
  if (gesture_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::GestureSpatialParams>(GetArena());
    gesture_params_ = p;
  }
  return gesture_params_;
}
inline ::proto::GestureSpatialParams* DecoderParams::mutable_gesture_params() {
  // @@protoc_insertion_point(field_mutable:proto.DecoderParams.gesture_params)
  return _internal_mutable_gesture_params();
}
inline void DecoderParams::set_allocated_gesture_params(::proto::GestureSpatialParams* gesture_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gesture_params_;
  }
  if (gesture_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gesture_params);
    if (message_arena != submessage_arena) {
      gesture_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gesture_params_ = gesture_params;
  // @@protoc_insertion_point(field_set_allocated:proto.DecoderParams.gesture_params)
}

// optional .proto.TapSpatialParams tap_params = 11;
inline bool DecoderParams::_internal_has_tap_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tap_params_ != nullptr);
  return value;
}
inline bool DecoderParams::has_tap_params() const {
  return _internal_has_tap_params();
}
inline void DecoderParams::clear_tap_params() {
  if (tap_params_ != nullptr) tap_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::TapSpatialParams& DecoderParams::_internal_tap_params() const {
  const ::proto::TapSpatialParams* p = tap_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::TapSpatialParams*>(
      &::proto::_TapSpatialParams_default_instance_);
}
inline const ::proto::TapSpatialParams& DecoderParams::tap_params() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.tap_params)
  return _internal_tap_params();
}
inline void DecoderParams::unsafe_arena_set_allocated_tap_params(
    ::proto::TapSpatialParams* tap_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tap_params_);
  }
  tap_params_ = tap_params;
  if (tap_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DecoderParams.tap_params)
}
inline ::proto::TapSpatialParams* DecoderParams::release_tap_params() {
  auto temp = unsafe_arena_release_tap_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::TapSpatialParams* DecoderParams::unsafe_arena_release_tap_params() {
  // @@protoc_insertion_point(field_release:proto.DecoderParams.tap_params)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::TapSpatialParams* temp = tap_params_;
  tap_params_ = nullptr;
  return temp;
}
inline ::proto::TapSpatialParams* DecoderParams::_internal_mutable_tap_params() {
  _has_bits_[0] |= 0x00000002u;
  if (tap_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TapSpatialParams>(GetArena());
    tap_params_ = p;
  }
  return tap_params_;
}
inline ::proto::TapSpatialParams* DecoderParams::mutable_tap_params() {
  // @@protoc_insertion_point(field_mutable:proto.DecoderParams.tap_params)
  return _internal_mutable_tap_params();
}
inline void DecoderParams::set_allocated_tap_params(::proto::TapSpatialParams* tap_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tap_params_;
  }
  if (tap_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tap_params);
    if (message_arena != submessage_arena) {
      tap_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tap_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tap_params_ = tap_params;
  // @@protoc_insertion_point(field_set_allocated:proto.DecoderParams.tap_params)
}

// optional int32 max_multi_term_terminals = 12 [default = 10];
inline bool DecoderParams::_internal_has_max_multi_term_terminals() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DecoderParams::has_max_multi_term_terminals() const {
  return _internal_has_max_multi_term_terminals();
}
inline void DecoderParams::clear_max_multi_term_terminals() {
  max_multi_term_terminals_ = 10;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::_internal_max_multi_term_terminals() const {
  return max_multi_term_terminals_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DecoderParams::max_multi_term_terminals() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.max_multi_term_terminals)
  return _internal_max_multi_term_terminals();
}
inline void DecoderParams::_internal_set_max_multi_term_terminals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_multi_term_terminals_ = value;
}
inline void DecoderParams::set_max_multi_term_terminals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_multi_term_terminals(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.max_multi_term_terminals)
}

// optional float score_to_beat_absolute = 13 [default = -inf];
inline bool DecoderParams::_internal_has_score_to_beat_absolute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DecoderParams::has_score_to_beat_absolute() const {
  return _internal_has_score_to_beat_absolute();
}
inline void DecoderParams::clear_score_to_beat_absolute() {
  score_to_beat_absolute_ = -std::numeric_limits<float>::infinity();
  _has_bits_[0] &= ~0x00000004u;
}
inline float DecoderParams::_internal_score_to_beat_absolute() const {
  return score_to_beat_absolute_;
}
inline float DecoderParams::score_to_beat_absolute() const {
  // @@protoc_insertion_point(field_get:proto.DecoderParams.score_to_beat_absolute)
  return _internal_score_to_beat_absolute();
}
inline void DecoderParams::_internal_set_score_to_beat_absolute(float value) {
  _has_bits_[0] |= 0x00000004u;
  score_to_beat_absolute_ = value;
}
inline void DecoderParams::set_score_to_beat_absolute(float value) {
  _internal_set_score_to_beat_absolute(value);
  // @@protoc_insertion_point(field_set:proto.DecoderParams.score_to_beat_absolute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_decoder_2dparams_2eproto
