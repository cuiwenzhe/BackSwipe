// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android-decoder-params.proto

#include "android-decoder-params.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_decoder_2dparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DecoderParams_decoder_2dparams_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_android_2ddecoder_2dparams_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto;
namespace proto {
class DynamicLmParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicLmParams> _instance;
} _DynamicLmParams_default_instance_;
class AndroidDecoderParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AndroidDecoderParams> _instance;
} _AndroidDecoderParams_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_AndroidDecoderParams_default_instance_;
    new (ptr) ::proto::AndroidDecoderParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::AndroidDecoderParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto}, {
      &scc_info_DecoderParams_decoder_2dparams_2eproto.base,
      &scc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto.base,}};

static void InitDefaultsscc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_DynamicLmParams_default_instance_;
    new (ptr) ::proto::DynamicLmParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::DynamicLmParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_android_2ddecoder_2dparams_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_android_2ddecoder_2dparams_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_android_2ddecoder_2dparams_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_android_2ddecoder_2dparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, fixed_prefix_logp_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, max_ngram_order_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, lexicon_target_size_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, lexicon_prune_trigger_size_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, lexicon_max_size_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, unlearning_rate_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, min_normalization_count_for_unigrams_),
  PROTOBUF_FIELD_OFFSET(::proto::DynamicLmParams, min_normalization_count_for_ngrams_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, decoder_params_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, autocorrect_threshold_base_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, autocorrect_threshold_adjustment_per_tap_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, static_lm_interpolation_weight_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, dynamic_lm_interpolation_weight_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, dynamic_lm_params_),
  PROTOBUF_FIELD_OFFSET(::proto::AndroidDecoderParams, block_offensive_words_),
  0,
  3,
  4,
  5,
  6,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::proto::DynamicLmParams)},
  { 21, 33, sizeof(::proto::AndroidDecoderParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_DynamicLmParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_AndroidDecoderParams_default_instance_),
};

const char descriptor_table_protodef_android_2ddecoder_2dparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034android-decoder-params.proto\022\005proto\032\024d"
  "ecoder-params.proto\"\277\002\n\017DynamicLmParams\022"
  "\036\n\021fixed_prefix_logp\030\006 \001(\002:\003-10\022\032\n\017max_n"
  "gram_order\030\007 \001(\005:\0013\022\"\n\023lexicon_target_si"
  "ze\030\010 \001(\005:\00510000\022)\n\032lexicon_prune_trigger"
  "_size\030\t \001(\005:\00512000\022\037\n\020lexicon_max_size\030\n"
  " \001(\005:\00513000\022\032\n\017unlearning_rate\030\013 \001(\005:\0011\022"
  "3\n$min_normalization_count_for_unigrams\030"
  "\014 \001(\005:\00510000\022/\n\"min_normalization_count_"
  "for_ngrams\030\r \001(\005:\003100\"\316\002\n\024AndroidDecoder"
  "Params\022,\n\016decoder_params\030\001 \001(\0132\024.proto.D"
  "ecoderParams\022\'\n\032autocorrect_threshold_ba"
  "se\030\002 \001(\002:\003-10\0224\n(autocorrect_threshold_a"
  "djustment_per_tap\030\003 \001(\002:\002-2\022)\n\036static_lm"
  "_interpolation_weight\030\004 \001(\002:\0011\022,\n\037dynami"
  "c_lm_interpolation_weight\030\005 \001(\002:\0030.2\0221\n\021"
  "dynamic_lm_params\030\006 \001(\0132\026.proto.DynamicL"
  "mParams\022\035\n\025block_offensive_words\030\007 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_android_2ddecoder_2dparams_2eproto_deps[1] = {
  &::descriptor_table_decoder_2dparams_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_android_2ddecoder_2dparams_2eproto_sccs[2] = {
  &scc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto.base,
  &scc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_android_2ddecoder_2dparams_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_android_2ddecoder_2dparams_2eproto = {
  false, false, descriptor_table_protodef_android_2ddecoder_2dparams_2eproto, "android-decoder-params.proto", 718,
  &descriptor_table_android_2ddecoder_2dparams_2eproto_once, descriptor_table_android_2ddecoder_2dparams_2eproto_sccs, descriptor_table_android_2ddecoder_2dparams_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_android_2ddecoder_2dparams_2eproto::offsets,
  file_level_metadata_android_2ddecoder_2dparams_2eproto, 2, file_level_enum_descriptors_android_2ddecoder_2dparams_2eproto, file_level_service_descriptors_android_2ddecoder_2dparams_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_android_2ddecoder_2dparams_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_android_2ddecoder_2dparams_2eproto)), true);
namespace proto {

// ===================================================================

void DynamicLmParams::InitAsDefaultInstance() {
}
class DynamicLmParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicLmParams>()._has_bits_);
  static void set_has_fixed_prefix_logp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_ngram_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lexicon_target_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lexicon_prune_trigger_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lexicon_max_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unlearning_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_normalization_count_for_unigrams(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_min_normalization_count_for_ngrams(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

DynamicLmParams::DynamicLmParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.DynamicLmParams)
}
DynamicLmParams::DynamicLmParams(const DynamicLmParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fixed_prefix_logp_, &from.fixed_prefix_logp_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_normalization_count_for_ngrams_) -
    reinterpret_cast<char*>(&fixed_prefix_logp_)) + sizeof(min_normalization_count_for_ngrams_));
  // @@protoc_insertion_point(copy_constructor:proto.DynamicLmParams)
}

void DynamicLmParams::SharedCtor() {
  fixed_prefix_logp_ = -10;
  max_ngram_order_ = 3;
  lexicon_target_size_ = 10000;
  lexicon_prune_trigger_size_ = 12000;
  lexicon_max_size_ = 13000;
  unlearning_rate_ = 1;
  min_normalization_count_for_unigrams_ = 10000;
  min_normalization_count_for_ngrams_ = 100;
}

DynamicLmParams::~DynamicLmParams() {
  // @@protoc_insertion_point(destructor:proto.DynamicLmParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DynamicLmParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DynamicLmParams::ArenaDtor(void* object) {
  DynamicLmParams* _this = reinterpret_cast< DynamicLmParams* >(object);
  (void)_this;
}
void DynamicLmParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicLmParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicLmParams& DynamicLmParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicLmParams_android_2ddecoder_2dparams_2eproto.base);
  return *internal_default_instance();
}


void DynamicLmParams::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DynamicLmParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    fixed_prefix_logp_ = -10;
    max_ngram_order_ = 3;
    lexicon_target_size_ = 10000;
    lexicon_prune_trigger_size_ = 12000;
    lexicon_max_size_ = 13000;
    unlearning_rate_ = 1;
    min_normalization_count_for_unigrams_ = 10000;
    min_normalization_count_for_ngrams_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicLmParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fixed_prefix_logp = 6 [default = -10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_fixed_prefix_logp(&has_bits);
          fixed_prefix_logp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 max_ngram_order = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_ngram_order(&has_bits);
          max_ngram_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lexicon_target_size = 8 [default = 10000];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lexicon_target_size(&has_bits);
          lexicon_target_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lexicon_prune_trigger_size = 9 [default = 12000];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_lexicon_prune_trigger_size(&has_bits);
          lexicon_prune_trigger_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lexicon_max_size = 10 [default = 13000];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lexicon_max_size(&has_bits);
          lexicon_max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unlearning_rate = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_unlearning_rate(&has_bits);
          unlearning_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_normalization_count_for_unigrams = 12 [default = 10000];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_min_normalization_count_for_unigrams(&has_bits);
          min_normalization_count_for_unigrams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 min_normalization_count_for_ngrams = 13 [default = 100];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_min_normalization_count_for_ngrams(&has_bits);
          min_normalization_count_for_ngrams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicLmParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DynamicLmParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fixed_prefix_logp = 6 [default = -10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_fixed_prefix_logp(), target);
  }

  // optional int32 max_ngram_order = 7 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_ngram_order(), target);
  }

  // optional int32 lexicon_target_size = 8 [default = 10000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_lexicon_target_size(), target);
  }

  // optional int32 lexicon_prune_trigger_size = 9 [default = 12000];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_lexicon_prune_trigger_size(), target);
  }

  // optional int32 lexicon_max_size = 10 [default = 13000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_lexicon_max_size(), target);
  }

  // optional int32 unlearning_rate = 11 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_unlearning_rate(), target);
  }

  // optional int32 min_normalization_count_for_unigrams = 12 [default = 10000];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_min_normalization_count_for_unigrams(), target);
  }

  // optional int32 min_normalization_count_for_ngrams = 13 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_min_normalization_count_for_ngrams(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DynamicLmParams)
  return target;
}

size_t DynamicLmParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DynamicLmParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float fixed_prefix_logp = 6 [default = -10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 max_ngram_order = 7 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_max_ngram_order());
    }

    // optional int32 lexicon_target_size = 8 [default = 10000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lexicon_target_size());
    }

    // optional int32 lexicon_prune_trigger_size = 9 [default = 12000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lexicon_prune_trigger_size());
    }

    // optional int32 lexicon_max_size = 10 [default = 13000];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lexicon_max_size());
    }

    // optional int32 unlearning_rate = 11 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unlearning_rate());
    }

    // optional int32 min_normalization_count_for_unigrams = 12 [default = 10000];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_normalization_count_for_unigrams());
    }

    // optional int32 min_normalization_count_for_ngrams = 13 [default = 100];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_min_normalization_count_for_ngrams());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicLmParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DynamicLmParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicLmParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicLmParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DynamicLmParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DynamicLmParams)
    MergeFrom(*source);
  }
}

void DynamicLmParams::MergeFrom(const DynamicLmParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DynamicLmParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      fixed_prefix_logp_ = from.fixed_prefix_logp_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ngram_order_ = from.max_ngram_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      lexicon_target_size_ = from.lexicon_target_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      lexicon_prune_trigger_size_ = from.lexicon_prune_trigger_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      lexicon_max_size_ = from.lexicon_max_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      unlearning_rate_ = from.unlearning_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_normalization_count_for_unigrams_ = from.min_normalization_count_for_unigrams_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_normalization_count_for_ngrams_ = from.min_normalization_count_for_ngrams_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicLmParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DynamicLmParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicLmParams::CopyFrom(const DynamicLmParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DynamicLmParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicLmParams::IsInitialized() const {
  return true;
}

void DynamicLmParams::InternalSwap(DynamicLmParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fixed_prefix_logp_, other->fixed_prefix_logp_);
  swap(max_ngram_order_, other->max_ngram_order_);
  swap(lexicon_target_size_, other->lexicon_target_size_);
  swap(lexicon_prune_trigger_size_, other->lexicon_prune_trigger_size_);
  swap(lexicon_max_size_, other->lexicon_max_size_);
  swap(unlearning_rate_, other->unlearning_rate_);
  swap(min_normalization_count_for_unigrams_, other->min_normalization_count_for_unigrams_);
  swap(min_normalization_count_for_ngrams_, other->min_normalization_count_for_ngrams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicLmParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AndroidDecoderParams::InitAsDefaultInstance() {
  ::proto::_AndroidDecoderParams_default_instance_._instance.get_mutable()->decoder_params_ = const_cast< ::proto::DecoderParams*>(
      ::proto::DecoderParams::internal_default_instance());
  ::proto::_AndroidDecoderParams_default_instance_._instance.get_mutable()->dynamic_lm_params_ = const_cast< ::proto::DynamicLmParams*>(
      ::proto::DynamicLmParams::internal_default_instance());
}
class AndroidDecoderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AndroidDecoderParams>()._has_bits_);
  static const ::proto::DecoderParams& decoder_params(const AndroidDecoderParams* msg);
  static void set_has_decoder_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autocorrect_threshold_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_autocorrect_threshold_adjustment_per_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_static_lm_interpolation_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dynamic_lm_interpolation_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::proto::DynamicLmParams& dynamic_lm_params(const AndroidDecoderParams* msg);
  static void set_has_dynamic_lm_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_block_offensive_words(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::proto::DecoderParams&
AndroidDecoderParams::_Internal::decoder_params(const AndroidDecoderParams* msg) {
  return *msg->decoder_params_;
}
const ::proto::DynamicLmParams&
AndroidDecoderParams::_Internal::dynamic_lm_params(const AndroidDecoderParams* msg) {
  return *msg->dynamic_lm_params_;
}
void AndroidDecoderParams::clear_decoder_params() {
  if (decoder_params_ != nullptr) decoder_params_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AndroidDecoderParams::AndroidDecoderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.AndroidDecoderParams)
}
AndroidDecoderParams::AndroidDecoderParams(const AndroidDecoderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_decoder_params()) {
    decoder_params_ = new ::proto::DecoderParams(*from.decoder_params_);
  } else {
    decoder_params_ = nullptr;
  }
  if (from._internal_has_dynamic_lm_params()) {
    dynamic_lm_params_ = new ::proto::DynamicLmParams(*from.dynamic_lm_params_);
  } else {
    dynamic_lm_params_ = nullptr;
  }
  ::memcpy(&block_offensive_words_, &from.block_offensive_words_,
    static_cast<size_t>(reinterpret_cast<char*>(&dynamic_lm_interpolation_weight_) -
    reinterpret_cast<char*>(&block_offensive_words_)) + sizeof(dynamic_lm_interpolation_weight_));
  // @@protoc_insertion_point(copy_constructor:proto.AndroidDecoderParams)
}

void AndroidDecoderParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto.base);
  ::memset(&decoder_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_offensive_words_) -
      reinterpret_cast<char*>(&decoder_params_)) + sizeof(block_offensive_words_));
  autocorrect_threshold_base_ = -10;
  autocorrect_threshold_adjustment_per_tap_ = -2;
  static_lm_interpolation_weight_ = 1;
  dynamic_lm_interpolation_weight_ = 0.2f;
}

AndroidDecoderParams::~AndroidDecoderParams() {
  // @@protoc_insertion_point(destructor:proto.AndroidDecoderParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AndroidDecoderParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete decoder_params_;
  if (this != internal_default_instance()) delete dynamic_lm_params_;
}

void AndroidDecoderParams::ArenaDtor(void* object) {
  AndroidDecoderParams* _this = reinterpret_cast< AndroidDecoderParams* >(object);
  (void)_this;
}
void AndroidDecoderParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AndroidDecoderParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AndroidDecoderParams& AndroidDecoderParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AndroidDecoderParams_android_2ddecoder_2dparams_2eproto.base);
  return *internal_default_instance();
}


void AndroidDecoderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AndroidDecoderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(decoder_params_ != nullptr);
      decoder_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dynamic_lm_params_ != nullptr);
      dynamic_lm_params_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    block_offensive_words_ = false;
    autocorrect_threshold_base_ = -10;
    autocorrect_threshold_adjustment_per_tap_ = -2;
    static_lm_interpolation_weight_ = 1;
    dynamic_lm_interpolation_weight_ = 0.2f;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AndroidDecoderParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .proto.DecoderParams decoder_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_decoder_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float autocorrect_threshold_base = 2 [default = -10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_autocorrect_threshold_base(&has_bits);
          autocorrect_threshold_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float autocorrect_threshold_adjustment_per_tap = 3 [default = -2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_autocorrect_threshold_adjustment_per_tap(&has_bits);
          autocorrect_threshold_adjustment_per_tap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float static_lm_interpolation_weight = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_static_lm_interpolation_weight(&has_bits);
          static_lm_interpolation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dynamic_lm_interpolation_weight = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_dynamic_lm_interpolation_weight(&has_bits);
          dynamic_lm_interpolation_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .proto.DynamicLmParams dynamic_lm_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_lm_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool block_offensive_words = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_block_offensive_words(&has_bits);
          block_offensive_words_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AndroidDecoderParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.AndroidDecoderParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.DecoderParams decoder_params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::decoder_params(this), target, stream);
  }

  // optional float autocorrect_threshold_base = 2 [default = -10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_autocorrect_threshold_base(), target);
  }

  // optional float autocorrect_threshold_adjustment_per_tap = 3 [default = -2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_autocorrect_threshold_adjustment_per_tap(), target);
  }

  // optional float static_lm_interpolation_weight = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_static_lm_interpolation_weight(), target);
  }

  // optional float dynamic_lm_interpolation_weight = 5 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dynamic_lm_interpolation_weight(), target);
  }

  // optional .proto.DynamicLmParams dynamic_lm_params = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dynamic_lm_params(this), target, stream);
  }

  // optional bool block_offensive_words = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_block_offensive_words(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.AndroidDecoderParams)
  return target;
}

size_t AndroidDecoderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AndroidDecoderParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .proto.DecoderParams decoder_params = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decoder_params_);
    }

    // optional .proto.DynamicLmParams dynamic_lm_params = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_lm_params_);
    }

    // optional bool block_offensive_words = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float autocorrect_threshold_base = 2 [default = -10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float autocorrect_threshold_adjustment_per_tap = 3 [default = -2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float static_lm_interpolation_weight = 4 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float dynamic_lm_interpolation_weight = 5 [default = 0.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AndroidDecoderParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.AndroidDecoderParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AndroidDecoderParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AndroidDecoderParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.AndroidDecoderParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.AndroidDecoderParams)
    MergeFrom(*source);
  }
}

void AndroidDecoderParams::MergeFrom(const AndroidDecoderParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AndroidDecoderParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_decoder_params()->::proto::DecoderParams::MergeFrom(from._internal_decoder_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dynamic_lm_params()->::proto::DynamicLmParams::MergeFrom(from._internal_dynamic_lm_params());
    }
    if (cached_has_bits & 0x00000004u) {
      block_offensive_words_ = from.block_offensive_words_;
    }
    if (cached_has_bits & 0x00000008u) {
      autocorrect_threshold_base_ = from.autocorrect_threshold_base_;
    }
    if (cached_has_bits & 0x00000010u) {
      autocorrect_threshold_adjustment_per_tap_ = from.autocorrect_threshold_adjustment_per_tap_;
    }
    if (cached_has_bits & 0x00000020u) {
      static_lm_interpolation_weight_ = from.static_lm_interpolation_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      dynamic_lm_interpolation_weight_ = from.dynamic_lm_interpolation_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AndroidDecoderParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.AndroidDecoderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AndroidDecoderParams::CopyFrom(const AndroidDecoderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AndroidDecoderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AndroidDecoderParams::IsInitialized() const {
  return true;
}

void AndroidDecoderParams::InternalSwap(AndroidDecoderParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AndroidDecoderParams, block_offensive_words_)
      + sizeof(AndroidDecoderParams::block_offensive_words_)
      - PROTOBUF_FIELD_OFFSET(AndroidDecoderParams, decoder_params_)>(
          reinterpret_cast<char*>(&decoder_params_),
          reinterpret_cast<char*>(&other->decoder_params_));
  swap(autocorrect_threshold_base_, other->autocorrect_threshold_base_);
  swap(autocorrect_threshold_adjustment_per_tap_, other->autocorrect_threshold_adjustment_per_tap_);
  swap(static_lm_interpolation_weight_, other->static_lm_interpolation_weight_);
  swap(dynamic_lm_interpolation_weight_, other->dynamic_lm_interpolation_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AndroidDecoderParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::DynamicLmParams* Arena::CreateMaybeMessage< ::proto::DynamicLmParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DynamicLmParams >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::AndroidDecoderParams* Arena::CreateMaybeMessage< ::proto::AndroidDecoderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::AndroidDecoderParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
