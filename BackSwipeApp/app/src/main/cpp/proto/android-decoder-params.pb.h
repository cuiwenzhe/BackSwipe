// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android-decoder-params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_android_2ddecoder_2dparams_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_android_2ddecoder_2dparams_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "decoder-params.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_android_2ddecoder_2dparams_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_android_2ddecoder_2dparams_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_android_2ddecoder_2dparams_2eproto;
namespace proto {
class AndroidDecoderParams;
class AndroidDecoderParamsDefaultTypeInternal;
extern AndroidDecoderParamsDefaultTypeInternal _AndroidDecoderParams_default_instance_;
class DynamicLmParams;
class DynamicLmParamsDefaultTypeInternal;
extern DynamicLmParamsDefaultTypeInternal _DynamicLmParams_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::AndroidDecoderParams* Arena::CreateMaybeMessage<::proto::AndroidDecoderParams>(Arena*);
template<> ::proto::DynamicLmParams* Arena::CreateMaybeMessage<::proto::DynamicLmParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class DynamicLmParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DynamicLmParams) */ {
 public:
  inline DynamicLmParams() : DynamicLmParams(nullptr) {};
  virtual ~DynamicLmParams();

  DynamicLmParams(const DynamicLmParams& from);
  DynamicLmParams(DynamicLmParams&& from) noexcept
    : DynamicLmParams() {
    *this = ::std::move(from);
  }

  inline DynamicLmParams& operator=(const DynamicLmParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicLmParams& operator=(DynamicLmParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicLmParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicLmParams* internal_default_instance() {
    return reinterpret_cast<const DynamicLmParams*>(
               &_DynamicLmParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DynamicLmParams& a, DynamicLmParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicLmParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicLmParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicLmParams* New() const final {
    return CreateMaybeMessage<DynamicLmParams>(nullptr);
  }

  DynamicLmParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicLmParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicLmParams& from);
  void MergeFrom(const DynamicLmParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicLmParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DynamicLmParams";
  }
  protected:
  explicit DynamicLmParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_android_2ddecoder_2dparams_2eproto);
    return ::descriptor_table_android_2ddecoder_2dparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedPrefixLogpFieldNumber = 6,
    kMaxNgramOrderFieldNumber = 7,
    kLexiconTargetSizeFieldNumber = 8,
    kLexiconPruneTriggerSizeFieldNumber = 9,
    kLexiconMaxSizeFieldNumber = 10,
    kUnlearningRateFieldNumber = 11,
    kMinNormalizationCountForUnigramsFieldNumber = 12,
    kMinNormalizationCountForNgramsFieldNumber = 13,
  };
  // optional float fixed_prefix_logp = 6 [default = -10];
  bool has_fixed_prefix_logp() const;
  private:
  bool _internal_has_fixed_prefix_logp() const;
  public:
  void clear_fixed_prefix_logp();
  float fixed_prefix_logp() const;
  void set_fixed_prefix_logp(float value);
  private:
  float _internal_fixed_prefix_logp() const;
  void _internal_set_fixed_prefix_logp(float value);
  public:

  // optional int32 max_ngram_order = 7 [default = 3];
  bool has_max_ngram_order() const;
  private:
  bool _internal_has_max_ngram_order() const;
  public:
  void clear_max_ngram_order();
  ::PROTOBUF_NAMESPACE_ID::int32 max_ngram_order() const;
  void set_max_ngram_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_ngram_order() const;
  void _internal_set_max_ngram_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lexicon_target_size = 8 [default = 10000];
  bool has_lexicon_target_size() const;
  private:
  bool _internal_has_lexicon_target_size() const;
  public:
  void clear_lexicon_target_size();
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_target_size() const;
  void set_lexicon_target_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lexicon_target_size() const;
  void _internal_set_lexicon_target_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lexicon_prune_trigger_size = 9 [default = 12000];
  bool has_lexicon_prune_trigger_size() const;
  private:
  bool _internal_has_lexicon_prune_trigger_size() const;
  public:
  void clear_lexicon_prune_trigger_size();
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_prune_trigger_size() const;
  void set_lexicon_prune_trigger_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lexicon_prune_trigger_size() const;
  void _internal_set_lexicon_prune_trigger_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lexicon_max_size = 10 [default = 13000];
  bool has_lexicon_max_size() const;
  private:
  bool _internal_has_lexicon_max_size() const;
  public:
  void clear_lexicon_max_size();
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_max_size() const;
  void set_lexicon_max_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lexicon_max_size() const;
  void _internal_set_lexicon_max_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 unlearning_rate = 11 [default = 1];
  bool has_unlearning_rate() const;
  private:
  bool _internal_has_unlearning_rate() const;
  public:
  void clear_unlearning_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 unlearning_rate() const;
  void set_unlearning_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unlearning_rate() const;
  void _internal_set_unlearning_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_normalization_count_for_unigrams = 12 [default = 10000];
  bool has_min_normalization_count_for_unigrams() const;
  private:
  bool _internal_has_min_normalization_count_for_unigrams() const;
  public:
  void clear_min_normalization_count_for_unigrams();
  ::PROTOBUF_NAMESPACE_ID::int32 min_normalization_count_for_unigrams() const;
  void set_min_normalization_count_for_unigrams(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_normalization_count_for_unigrams() const;
  void _internal_set_min_normalization_count_for_unigrams(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_normalization_count_for_ngrams = 13 [default = 100];
  bool has_min_normalization_count_for_ngrams() const;
  private:
  bool _internal_has_min_normalization_count_for_ngrams() const;
  public:
  void clear_min_normalization_count_for_ngrams();
  ::PROTOBUF_NAMESPACE_ID::int32 min_normalization_count_for_ngrams() const;
  void set_min_normalization_count_for_ngrams(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_normalization_count_for_ngrams() const;
  void _internal_set_min_normalization_count_for_ngrams(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DynamicLmParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float fixed_prefix_logp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_ngram_order_;
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_target_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_prune_trigger_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lexicon_max_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 unlearning_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_normalization_count_for_unigrams_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_normalization_count_for_ngrams_;
  friend struct ::TableStruct_android_2ddecoder_2dparams_2eproto;
};
// -------------------------------------------------------------------

class AndroidDecoderParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.AndroidDecoderParams) */ {
 public:
  inline AndroidDecoderParams() : AndroidDecoderParams(nullptr) {};
  virtual ~AndroidDecoderParams();

  AndroidDecoderParams(const AndroidDecoderParams& from);
  AndroidDecoderParams(AndroidDecoderParams&& from) noexcept
    : AndroidDecoderParams() {
    *this = ::std::move(from);
  }

  inline AndroidDecoderParams& operator=(const AndroidDecoderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AndroidDecoderParams& operator=(AndroidDecoderParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AndroidDecoderParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AndroidDecoderParams* internal_default_instance() {
    return reinterpret_cast<const AndroidDecoderParams*>(
               &_AndroidDecoderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AndroidDecoderParams& a, AndroidDecoderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AndroidDecoderParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AndroidDecoderParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AndroidDecoderParams* New() const final {
    return CreateMaybeMessage<AndroidDecoderParams>(nullptr);
  }

  AndroidDecoderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AndroidDecoderParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AndroidDecoderParams& from);
  void MergeFrom(const AndroidDecoderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AndroidDecoderParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.AndroidDecoderParams";
  }
  protected:
  explicit AndroidDecoderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_android_2ddecoder_2dparams_2eproto);
    return ::descriptor_table_android_2ddecoder_2dparams_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecoderParamsFieldNumber = 1,
    kDynamicLmParamsFieldNumber = 6,
    kBlockOffensiveWordsFieldNumber = 7,
    kAutocorrectThresholdBaseFieldNumber = 2,
    kAutocorrectThresholdAdjustmentPerTapFieldNumber = 3,
    kStaticLmInterpolationWeightFieldNumber = 4,
    kDynamicLmInterpolationWeightFieldNumber = 5,
  };
  // optional .proto.DecoderParams decoder_params = 1;
  bool has_decoder_params() const;
  private:
  bool _internal_has_decoder_params() const;
  public:
  void clear_decoder_params();
  const ::proto::DecoderParams& decoder_params() const;
  ::proto::DecoderParams* release_decoder_params();
  ::proto::DecoderParams* mutable_decoder_params();
  void set_allocated_decoder_params(::proto::DecoderParams* decoder_params);
  private:
  const ::proto::DecoderParams& _internal_decoder_params() const;
  ::proto::DecoderParams* _internal_mutable_decoder_params();
  public:
  void unsafe_arena_set_allocated_decoder_params(
      ::proto::DecoderParams* decoder_params);
  ::proto::DecoderParams* unsafe_arena_release_decoder_params();

  // optional .proto.DynamicLmParams dynamic_lm_params = 6;
  bool has_dynamic_lm_params() const;
  private:
  bool _internal_has_dynamic_lm_params() const;
  public:
  void clear_dynamic_lm_params();
  const ::proto::DynamicLmParams& dynamic_lm_params() const;
  ::proto::DynamicLmParams* release_dynamic_lm_params();
  ::proto::DynamicLmParams* mutable_dynamic_lm_params();
  void set_allocated_dynamic_lm_params(::proto::DynamicLmParams* dynamic_lm_params);
  private:
  const ::proto::DynamicLmParams& _internal_dynamic_lm_params() const;
  ::proto::DynamicLmParams* _internal_mutable_dynamic_lm_params();
  public:
  void unsafe_arena_set_allocated_dynamic_lm_params(
      ::proto::DynamicLmParams* dynamic_lm_params);
  ::proto::DynamicLmParams* unsafe_arena_release_dynamic_lm_params();

  // optional bool block_offensive_words = 7;
  bool has_block_offensive_words() const;
  private:
  bool _internal_has_block_offensive_words() const;
  public:
  void clear_block_offensive_words();
  bool block_offensive_words() const;
  void set_block_offensive_words(bool value);
  private:
  bool _internal_block_offensive_words() const;
  void _internal_set_block_offensive_words(bool value);
  public:

  // optional float autocorrect_threshold_base = 2 [default = -10];
  bool has_autocorrect_threshold_base() const;
  private:
  bool _internal_has_autocorrect_threshold_base() const;
  public:
  void clear_autocorrect_threshold_base();
  float autocorrect_threshold_base() const;
  void set_autocorrect_threshold_base(float value);
  private:
  float _internal_autocorrect_threshold_base() const;
  void _internal_set_autocorrect_threshold_base(float value);
  public:

  // optional float autocorrect_threshold_adjustment_per_tap = 3 [default = -2];
  bool has_autocorrect_threshold_adjustment_per_tap() const;
  private:
  bool _internal_has_autocorrect_threshold_adjustment_per_tap() const;
  public:
  void clear_autocorrect_threshold_adjustment_per_tap();
  float autocorrect_threshold_adjustment_per_tap() const;
  void set_autocorrect_threshold_adjustment_per_tap(float value);
  private:
  float _internal_autocorrect_threshold_adjustment_per_tap() const;
  void _internal_set_autocorrect_threshold_adjustment_per_tap(float value);
  public:

  // optional float static_lm_interpolation_weight = 4 [default = 1];
  bool has_static_lm_interpolation_weight() const;
  private:
  bool _internal_has_static_lm_interpolation_weight() const;
  public:
  void clear_static_lm_interpolation_weight();
  float static_lm_interpolation_weight() const;
  void set_static_lm_interpolation_weight(float value);
  private:
  float _internal_static_lm_interpolation_weight() const;
  void _internal_set_static_lm_interpolation_weight(float value);
  public:

  // optional float dynamic_lm_interpolation_weight = 5 [default = 0.2];
  bool has_dynamic_lm_interpolation_weight() const;
  private:
  bool _internal_has_dynamic_lm_interpolation_weight() const;
  public:
  void clear_dynamic_lm_interpolation_weight();
  float dynamic_lm_interpolation_weight() const;
  void set_dynamic_lm_interpolation_weight(float value);
  private:
  float _internal_dynamic_lm_interpolation_weight() const;
  void _internal_set_dynamic_lm_interpolation_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:proto.AndroidDecoderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::proto::DecoderParams* decoder_params_;
  ::proto::DynamicLmParams* dynamic_lm_params_;
  bool block_offensive_words_;
  float autocorrect_threshold_base_;
  float autocorrect_threshold_adjustment_per_tap_;
  float static_lm_interpolation_weight_;
  float dynamic_lm_interpolation_weight_;
  friend struct ::TableStruct_android_2ddecoder_2dparams_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicLmParams

// optional float fixed_prefix_logp = 6 [default = -10];
inline bool DynamicLmParams::_internal_has_fixed_prefix_logp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicLmParams::has_fixed_prefix_logp() const {
  return _internal_has_fixed_prefix_logp();
}
inline void DynamicLmParams::clear_fixed_prefix_logp() {
  fixed_prefix_logp_ = -10;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DynamicLmParams::_internal_fixed_prefix_logp() const {
  return fixed_prefix_logp_;
}
inline float DynamicLmParams::fixed_prefix_logp() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.fixed_prefix_logp)
  return _internal_fixed_prefix_logp();
}
inline void DynamicLmParams::_internal_set_fixed_prefix_logp(float value) {
  _has_bits_[0] |= 0x00000001u;
  fixed_prefix_logp_ = value;
}
inline void DynamicLmParams::set_fixed_prefix_logp(float value) {
  _internal_set_fixed_prefix_logp(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.fixed_prefix_logp)
}

// optional int32 max_ngram_order = 7 [default = 3];
inline bool DynamicLmParams::_internal_has_max_ngram_order() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicLmParams::has_max_ngram_order() const {
  return _internal_has_max_ngram_order();
}
inline void DynamicLmParams::clear_max_ngram_order() {
  max_ngram_order_ = 3;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_max_ngram_order() const {
  return max_ngram_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::max_ngram_order() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.max_ngram_order)
  return _internal_max_ngram_order();
}
inline void DynamicLmParams::_internal_set_max_ngram_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_ngram_order_ = value;
}
inline void DynamicLmParams::set_max_ngram_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_ngram_order(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.max_ngram_order)
}

// optional int32 lexicon_target_size = 8 [default = 10000];
inline bool DynamicLmParams::_internal_has_lexicon_target_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DynamicLmParams::has_lexicon_target_size() const {
  return _internal_has_lexicon_target_size();
}
inline void DynamicLmParams::clear_lexicon_target_size() {
  lexicon_target_size_ = 10000;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_lexicon_target_size() const {
  return lexicon_target_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::lexicon_target_size() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.lexicon_target_size)
  return _internal_lexicon_target_size();
}
inline void DynamicLmParams::_internal_set_lexicon_target_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  lexicon_target_size_ = value;
}
inline void DynamicLmParams::set_lexicon_target_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lexicon_target_size(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.lexicon_target_size)
}

// optional int32 lexicon_prune_trigger_size = 9 [default = 12000];
inline bool DynamicLmParams::_internal_has_lexicon_prune_trigger_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DynamicLmParams::has_lexicon_prune_trigger_size() const {
  return _internal_has_lexicon_prune_trigger_size();
}
inline void DynamicLmParams::clear_lexicon_prune_trigger_size() {
  lexicon_prune_trigger_size_ = 12000;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_lexicon_prune_trigger_size() const {
  return lexicon_prune_trigger_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::lexicon_prune_trigger_size() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.lexicon_prune_trigger_size)
  return _internal_lexicon_prune_trigger_size();
}
inline void DynamicLmParams::_internal_set_lexicon_prune_trigger_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lexicon_prune_trigger_size_ = value;
}
inline void DynamicLmParams::set_lexicon_prune_trigger_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lexicon_prune_trigger_size(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.lexicon_prune_trigger_size)
}

// optional int32 lexicon_max_size = 10 [default = 13000];
inline bool DynamicLmParams::_internal_has_lexicon_max_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DynamicLmParams::has_lexicon_max_size() const {
  return _internal_has_lexicon_max_size();
}
inline void DynamicLmParams::clear_lexicon_max_size() {
  lexicon_max_size_ = 13000;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_lexicon_max_size() const {
  return lexicon_max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::lexicon_max_size() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.lexicon_max_size)
  return _internal_lexicon_max_size();
}
inline void DynamicLmParams::_internal_set_lexicon_max_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  lexicon_max_size_ = value;
}
inline void DynamicLmParams::set_lexicon_max_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lexicon_max_size(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.lexicon_max_size)
}

// optional int32 unlearning_rate = 11 [default = 1];
inline bool DynamicLmParams::_internal_has_unlearning_rate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DynamicLmParams::has_unlearning_rate() const {
  return _internal_has_unlearning_rate();
}
inline void DynamicLmParams::clear_unlearning_rate() {
  unlearning_rate_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_unlearning_rate() const {
  return unlearning_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::unlearning_rate() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.unlearning_rate)
  return _internal_unlearning_rate();
}
inline void DynamicLmParams::_internal_set_unlearning_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  unlearning_rate_ = value;
}
inline void DynamicLmParams::set_unlearning_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unlearning_rate(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.unlearning_rate)
}

// optional int32 min_normalization_count_for_unigrams = 12 [default = 10000];
inline bool DynamicLmParams::_internal_has_min_normalization_count_for_unigrams() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DynamicLmParams::has_min_normalization_count_for_unigrams() const {
  return _internal_has_min_normalization_count_for_unigrams();
}
inline void DynamicLmParams::clear_min_normalization_count_for_unigrams() {
  min_normalization_count_for_unigrams_ = 10000;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_min_normalization_count_for_unigrams() const {
  return min_normalization_count_for_unigrams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::min_normalization_count_for_unigrams() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.min_normalization_count_for_unigrams)
  return _internal_min_normalization_count_for_unigrams();
}
inline void DynamicLmParams::_internal_set_min_normalization_count_for_unigrams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  min_normalization_count_for_unigrams_ = value;
}
inline void DynamicLmParams::set_min_normalization_count_for_unigrams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_normalization_count_for_unigrams(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.min_normalization_count_for_unigrams)
}

// optional int32 min_normalization_count_for_ngrams = 13 [default = 100];
inline bool DynamicLmParams::_internal_has_min_normalization_count_for_ngrams() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DynamicLmParams::has_min_normalization_count_for_ngrams() const {
  return _internal_has_min_normalization_count_for_ngrams();
}
inline void DynamicLmParams::clear_min_normalization_count_for_ngrams() {
  min_normalization_count_for_ngrams_ = 100;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::_internal_min_normalization_count_for_ngrams() const {
  return min_normalization_count_for_ngrams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicLmParams::min_normalization_count_for_ngrams() const {
  // @@protoc_insertion_point(field_get:proto.DynamicLmParams.min_normalization_count_for_ngrams)
  return _internal_min_normalization_count_for_ngrams();
}
inline void DynamicLmParams::_internal_set_min_normalization_count_for_ngrams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  min_normalization_count_for_ngrams_ = value;
}
inline void DynamicLmParams::set_min_normalization_count_for_ngrams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_normalization_count_for_ngrams(value);
  // @@protoc_insertion_point(field_set:proto.DynamicLmParams.min_normalization_count_for_ngrams)
}

// -------------------------------------------------------------------

// AndroidDecoderParams

// optional .proto.DecoderParams decoder_params = 1;
inline bool AndroidDecoderParams::_internal_has_decoder_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || decoder_params_ != nullptr);
  return value;
}
inline bool AndroidDecoderParams::has_decoder_params() const {
  return _internal_has_decoder_params();
}
inline const ::proto::DecoderParams& AndroidDecoderParams::_internal_decoder_params() const {
  const ::proto::DecoderParams* p = decoder_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::DecoderParams*>(
      &::proto::_DecoderParams_default_instance_);
}
inline const ::proto::DecoderParams& AndroidDecoderParams::decoder_params() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.decoder_params)
  return _internal_decoder_params();
}
inline void AndroidDecoderParams::unsafe_arena_set_allocated_decoder_params(
    ::proto::DecoderParams* decoder_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_params_);
  }
  decoder_params_ = decoder_params;
  if (decoder_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AndroidDecoderParams.decoder_params)
}
inline ::proto::DecoderParams* AndroidDecoderParams::release_decoder_params() {
  auto temp = unsafe_arena_release_decoder_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::DecoderParams* AndroidDecoderParams::unsafe_arena_release_decoder_params() {
  // @@protoc_insertion_point(field_release:proto.AndroidDecoderParams.decoder_params)
  _has_bits_[0] &= ~0x00000001u;
  ::proto::DecoderParams* temp = decoder_params_;
  decoder_params_ = nullptr;
  return temp;
}
inline ::proto::DecoderParams* AndroidDecoderParams::_internal_mutable_decoder_params() {
  _has_bits_[0] |= 0x00000001u;
  if (decoder_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DecoderParams>(GetArena());
    decoder_params_ = p;
  }
  return decoder_params_;
}
inline ::proto::DecoderParams* AndroidDecoderParams::mutable_decoder_params() {
  // @@protoc_insertion_point(field_mutable:proto.AndroidDecoderParams.decoder_params)
  return _internal_mutable_decoder_params();
}
inline void AndroidDecoderParams::set_allocated_decoder_params(::proto::DecoderParams* decoder_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_params_);
  }
  if (decoder_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decoder_params)->GetArena();
    if (message_arena != submessage_arena) {
      decoder_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decoder_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  decoder_params_ = decoder_params;
  // @@protoc_insertion_point(field_set_allocated:proto.AndroidDecoderParams.decoder_params)
}

// optional float autocorrect_threshold_base = 2 [default = -10];
inline bool AndroidDecoderParams::_internal_has_autocorrect_threshold_base() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AndroidDecoderParams::has_autocorrect_threshold_base() const {
  return _internal_has_autocorrect_threshold_base();
}
inline void AndroidDecoderParams::clear_autocorrect_threshold_base() {
  autocorrect_threshold_base_ = -10;
  _has_bits_[0] &= ~0x00000008u;
}
inline float AndroidDecoderParams::_internal_autocorrect_threshold_base() const {
  return autocorrect_threshold_base_;
}
inline float AndroidDecoderParams::autocorrect_threshold_base() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.autocorrect_threshold_base)
  return _internal_autocorrect_threshold_base();
}
inline void AndroidDecoderParams::_internal_set_autocorrect_threshold_base(float value) {
  _has_bits_[0] |= 0x00000008u;
  autocorrect_threshold_base_ = value;
}
inline void AndroidDecoderParams::set_autocorrect_threshold_base(float value) {
  _internal_set_autocorrect_threshold_base(value);
  // @@protoc_insertion_point(field_set:proto.AndroidDecoderParams.autocorrect_threshold_base)
}

// optional float autocorrect_threshold_adjustment_per_tap = 3 [default = -2];
inline bool AndroidDecoderParams::_internal_has_autocorrect_threshold_adjustment_per_tap() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AndroidDecoderParams::has_autocorrect_threshold_adjustment_per_tap() const {
  return _internal_has_autocorrect_threshold_adjustment_per_tap();
}
inline void AndroidDecoderParams::clear_autocorrect_threshold_adjustment_per_tap() {
  autocorrect_threshold_adjustment_per_tap_ = -2;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AndroidDecoderParams::_internal_autocorrect_threshold_adjustment_per_tap() const {
  return autocorrect_threshold_adjustment_per_tap_;
}
inline float AndroidDecoderParams::autocorrect_threshold_adjustment_per_tap() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.autocorrect_threshold_adjustment_per_tap)
  return _internal_autocorrect_threshold_adjustment_per_tap();
}
inline void AndroidDecoderParams::_internal_set_autocorrect_threshold_adjustment_per_tap(float value) {
  _has_bits_[0] |= 0x00000010u;
  autocorrect_threshold_adjustment_per_tap_ = value;
}
inline void AndroidDecoderParams::set_autocorrect_threshold_adjustment_per_tap(float value) {
  _internal_set_autocorrect_threshold_adjustment_per_tap(value);
  // @@protoc_insertion_point(field_set:proto.AndroidDecoderParams.autocorrect_threshold_adjustment_per_tap)
}

// optional float static_lm_interpolation_weight = 4 [default = 1];
inline bool AndroidDecoderParams::_internal_has_static_lm_interpolation_weight() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AndroidDecoderParams::has_static_lm_interpolation_weight() const {
  return _internal_has_static_lm_interpolation_weight();
}
inline void AndroidDecoderParams::clear_static_lm_interpolation_weight() {
  static_lm_interpolation_weight_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AndroidDecoderParams::_internal_static_lm_interpolation_weight() const {
  return static_lm_interpolation_weight_;
}
inline float AndroidDecoderParams::static_lm_interpolation_weight() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.static_lm_interpolation_weight)
  return _internal_static_lm_interpolation_weight();
}
inline void AndroidDecoderParams::_internal_set_static_lm_interpolation_weight(float value) {
  _has_bits_[0] |= 0x00000020u;
  static_lm_interpolation_weight_ = value;
}
inline void AndroidDecoderParams::set_static_lm_interpolation_weight(float value) {
  _internal_set_static_lm_interpolation_weight(value);
  // @@protoc_insertion_point(field_set:proto.AndroidDecoderParams.static_lm_interpolation_weight)
}

// optional float dynamic_lm_interpolation_weight = 5 [default = 0.2];
inline bool AndroidDecoderParams::_internal_has_dynamic_lm_interpolation_weight() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AndroidDecoderParams::has_dynamic_lm_interpolation_weight() const {
  return _internal_has_dynamic_lm_interpolation_weight();
}
inline void AndroidDecoderParams::clear_dynamic_lm_interpolation_weight() {
  dynamic_lm_interpolation_weight_ = 0.2f;
  _has_bits_[0] &= ~0x00000040u;
}
inline float AndroidDecoderParams::_internal_dynamic_lm_interpolation_weight() const {
  return dynamic_lm_interpolation_weight_;
}
inline float AndroidDecoderParams::dynamic_lm_interpolation_weight() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.dynamic_lm_interpolation_weight)
  return _internal_dynamic_lm_interpolation_weight();
}
inline void AndroidDecoderParams::_internal_set_dynamic_lm_interpolation_weight(float value) {
  _has_bits_[0] |= 0x00000040u;
  dynamic_lm_interpolation_weight_ = value;
}
inline void AndroidDecoderParams::set_dynamic_lm_interpolation_weight(float value) {
  _internal_set_dynamic_lm_interpolation_weight(value);
  // @@protoc_insertion_point(field_set:proto.AndroidDecoderParams.dynamic_lm_interpolation_weight)
}

// optional .proto.DynamicLmParams dynamic_lm_params = 6;
inline bool AndroidDecoderParams::_internal_has_dynamic_lm_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dynamic_lm_params_ != nullptr);
  return value;
}
inline bool AndroidDecoderParams::has_dynamic_lm_params() const {
  return _internal_has_dynamic_lm_params();
}
inline void AndroidDecoderParams::clear_dynamic_lm_params() {
  if (dynamic_lm_params_ != nullptr) dynamic_lm_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::proto::DynamicLmParams& AndroidDecoderParams::_internal_dynamic_lm_params() const {
  const ::proto::DynamicLmParams* p = dynamic_lm_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::DynamicLmParams*>(
      &::proto::_DynamicLmParams_default_instance_);
}
inline const ::proto::DynamicLmParams& AndroidDecoderParams::dynamic_lm_params() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.dynamic_lm_params)
  return _internal_dynamic_lm_params();
}
inline void AndroidDecoderParams::unsafe_arena_set_allocated_dynamic_lm_params(
    ::proto::DynamicLmParams* dynamic_lm_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dynamic_lm_params_);
  }
  dynamic_lm_params_ = dynamic_lm_params;
  if (dynamic_lm_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.AndroidDecoderParams.dynamic_lm_params)
}
inline ::proto::DynamicLmParams* AndroidDecoderParams::release_dynamic_lm_params() {
  auto temp = unsafe_arena_release_dynamic_lm_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::DynamicLmParams* AndroidDecoderParams::unsafe_arena_release_dynamic_lm_params() {
  // @@protoc_insertion_point(field_release:proto.AndroidDecoderParams.dynamic_lm_params)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::DynamicLmParams* temp = dynamic_lm_params_;
  dynamic_lm_params_ = nullptr;
  return temp;
}
inline ::proto::DynamicLmParams* AndroidDecoderParams::_internal_mutable_dynamic_lm_params() {
  _has_bits_[0] |= 0x00000002u;
  if (dynamic_lm_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DynamicLmParams>(GetArena());
    dynamic_lm_params_ = p;
  }
  return dynamic_lm_params_;
}
inline ::proto::DynamicLmParams* AndroidDecoderParams::mutable_dynamic_lm_params() {
  // @@protoc_insertion_point(field_mutable:proto.AndroidDecoderParams.dynamic_lm_params)
  return _internal_mutable_dynamic_lm_params();
}
inline void AndroidDecoderParams::set_allocated_dynamic_lm_params(::proto::DynamicLmParams* dynamic_lm_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dynamic_lm_params_;
  }
  if (dynamic_lm_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dynamic_lm_params);
    if (message_arena != submessage_arena) {
      dynamic_lm_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_lm_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dynamic_lm_params_ = dynamic_lm_params;
  // @@protoc_insertion_point(field_set_allocated:proto.AndroidDecoderParams.dynamic_lm_params)
}

// optional bool block_offensive_words = 7;
inline bool AndroidDecoderParams::_internal_has_block_offensive_words() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AndroidDecoderParams::has_block_offensive_words() const {
  return _internal_has_block_offensive_words();
}
inline void AndroidDecoderParams::clear_block_offensive_words() {
  block_offensive_words_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AndroidDecoderParams::_internal_block_offensive_words() const {
  return block_offensive_words_;
}
inline bool AndroidDecoderParams::block_offensive_words() const {
  // @@protoc_insertion_point(field_get:proto.AndroidDecoderParams.block_offensive_words)
  return _internal_block_offensive_words();
}
inline void AndroidDecoderParams::_internal_set_block_offensive_words(bool value) {
  _has_bits_[0] |= 0x00000004u;
  block_offensive_words_ = value;
}
inline void AndroidDecoderParams::set_block_offensive_words(bool value) {
  _internal_set_block_offensive_words(value);
  // @@protoc_insertion_point(field_set:proto.AndroidDecoderParams.block_offensive_words)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_android_2ddecoder_2dparams_2eproto
